#!/bin/bash

# Script de diagnostic et correction pour le d√©ploiement Streamlit Cloud
# Ce script aide √† identifier et corriger les probl√®mes courants de d√©ploiement

echo "üîç D√©marrage du diagnostic pour Streamlit Cloud..."
echo "=================================================="

# V√©rifier que nous sommes dans le r√©pertoire du projet
if [ ! -f "Home.py" ] && [ ! -f "minimal_test.py" ]; then
    echo "‚ùå ERREUR: Ce script doit √™tre ex√©cut√© depuis le r√©pertoire racine du projet"
    exit 1
fi

# V√©rifier requirements.txt
echo "üìã V√©rification de requirements.txt..."
if [ ! -f "requirements.txt" ]; then
    echo "‚ùå ERREUR: requirements.txt introuvable"
    exit 1
else
    echo "‚úÖ requirements.txt trouv√©"
    echo "Contenu:"
    cat requirements.txt
fi

# V√©rifier les biblioth√®ques probl√©matiques dans requirements.txt
echo -e "\nüîé Recherche de biblioth√®ques potentiellement probl√©matiques..."
PROBLEMATIC_LIBS=("tensorflow-gpu" "torch" "opencv-python" "psycopg2" "mysqlclient")
for lib in "${PROBLEMATIC_LIBS[@]}"; do
    if grep -q "$lib" requirements.txt; then
        echo "‚ö†Ô∏è Biblioth√®que potentiellement probl√©matique trouv√©e: $lib"
        echo "   ‚Üí Consid√©rez utiliser une alternative plus l√©g√®re ou un import conditionnel"
    fi
done

# Cr√©er une sauvegarde des fichiers importants
echo -e "\nüíæ Cr√©ation de sauvegardes..."
mkdir -p backup
cp Home.py backup/Home.py.bak 2>/dev/null || echo "Home.py non trouv√©"
cp requirements.txt backup/requirements.txt.bak
echo "‚úÖ Sauvegardes cr√©√©es dans le dossier 'backup'"

# V√©rifier la structure des dossiers
echo -e "\nüìÅ V√©rification de la structure des dossiers..."
if [ ! -d "pages" ]; then
    echo "‚ö†Ô∏è Dossier 'pages' non trouv√©. V√©rifiez la structure de votre projet"
else
    echo "‚úÖ Dossier 'pages' trouv√©"
    echo "Contenu du dossier pages:"
    ls -la pages/
fi

# V√©rifier si .streamlit existe
if [ ! -d ".streamlit" ]; then
    echo "‚ö†Ô∏è Dossier '.streamlit' non trouv√©. Cr√©ation..."
    mkdir -p .streamlit
    echo "‚úÖ Dossier '.streamlit' cr√©√©"
else
    echo "‚úÖ Dossier '.streamlit' trouv√©"
fi

# V√©rifier la configuration
if [ ! -f ".streamlit/config.toml" ]; then
    echo "‚ö†Ô∏è Fichier config.toml non trouv√©. La configuration par d√©faut sera utilis√©e."
else
    echo "‚úÖ Fichier config.toml trouv√©"
fi

# V√©rifier la pr√©sence de secrets.toml (ne pas afficher le contenu pour des raisons de s√©curit√©)
if [ ! -f ".streamlit/secrets.toml" ]; then
    echo "‚ö†Ô∏è Fichier secrets.toml local non trouv√©. Assurez-vous de configurer les secrets sur Streamlit Cloud"
else
    echo "‚úÖ Fichier secrets.toml local trouv√© (ne pas l'inclure dans Git!)"
fi

# V√©rifier les fichiers Python probl√©matiques
echo -e "\nüîç Recherche d'imports probl√©matiques..."
python_files=$(find . -name "*.py")
for file in $python_files; do
    if grep -q "^import torch" "$file" || grep -q "^from torch" "$file"; then
        echo "‚ö†Ô∏è Import torch trouv√© dans $file"
        echo "   ‚Üí Consid√©rez un import conditionnel: 'try: import torch; except ImportError: torch = None'"
    fi
    if grep -q "^import tensorflow" "$file" || grep -q "^from tensorflow" "$file"; then
        echo "‚ö†Ô∏è Import tensorflow trouv√© dans $file"
        echo "   ‚Üí Consid√©rez un import conditionnel: 'try: import tensorflow; except ImportError: tensorflow = None'"
    fi
done

# V√©rifier l'√©tat Git
echo -e "\nüîÑ V√©rification de l'√©tat Git..."
if [ -d ".git" ]; then
    echo "‚úÖ D√©p√¥t Git trouv√©"
    echo "Derniers commits:"
    git log -n 5 --oneline
    echo -e "\nBranche courante:"
    git branch --show-current
    echo -e "\nFichiers modifi√©s:"
    git status -s
else
    echo "‚ùå D√©p√¥t Git non trouv√©"
fi

# Cr√©er un fichier minimal pour le d√©ploiement si n√©cessaire
if [ ! -f "minimal_test.py" ]; then
    echo -e "\nüìù Cr√©ation d'un fichier minimal_test.py pour tester le d√©ploiement..."
    echo 'import streamlit as st
st.title("Test minimal Streamlit")
st.success("Si vous voyez cette page, le d√©ploiement minimal fonctionne!")
st.write("V√©rifiez les logs de d√©ploiement pour plus de d√©tails.")' > minimal_test.py
    echo "‚úÖ Fichier minimal_test.py cr√©√©"
fi

# Proposer des solutions
echo -e "\nüõ†Ô∏è Solutions recommand√©es:"
echo "1. Red√©ployer l'application sur Streamlit Cloud"
echo "2. V√©rifier les secrets configur√©s sur Streamlit Cloud (sans les copier-coller dans le chat!)"
echo "3. Tester avec minimal_test.py comme page d'entr√©e sur Streamlit Cloud"
echo "4. V√©rifier les logs de d√©ploiement sur Streamlit Cloud"
echo "5. Ajouter progressivement les fonctionnalit√©s pour identifier le probl√®me exact"

echo -e "\n‚úÖ Diagnostic termin√©!"
echo "Ex√©cutez 'streamlit run minimal_test.py' pour tester localement le fichier minimal"
echo "=================================================="