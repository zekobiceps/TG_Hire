import streamlit as st
import platform
import sys
import subprocess
import pandas as pd
import os
import time

st.set_page_config(
    page_title="Diagnostic de d√©ploiement",
    page_icon="üîç",
    layout="wide"
)

st.title("üîç Diagnostic de d√©ploiement Streamlit")

# Afficher les informations syst√®me
st.header("Informations syst√®me")
col1, col2 = st.columns(2)

with col1:
    st.subheader("Environnement Python")
    st.code(f"""
Python version: {platform.python_version()}
Python implementation: {platform.python_implementation()}
OS: {platform.system()} {platform.release()}
Architecture: {platform.machine()}
Streamlit version: {st.__version__}
    """)

with col2:
    st.subheader("Packages install√©s")
    # Lister les packages les plus importants
    try:
        packages = {
            "pandas": pd.__version__,
            "numpy": pd.np.__version__,
            "streamlit": st.__version__,
            "plotly": "Importable" if "plotly" in sys.modules else "Non import√©",
            "pdfplumber": "Importable" if "pdfplumber" in sys.modules else "Non import√©",
            "PyPDF2": "Importable" if "PyPDF2" in sys.modules else "Non import√©",
            "pypdf": "Importable" if "pypdf" in sys.modules else "Non import√©",
        }
        
        package_df = pd.DataFrame(list(packages.items()), columns=["Package", "Version"])
        st.dataframe(package_df)
    except Exception as e:
        st.error(f"Erreur lors de la v√©rification des packages: {str(e)}")

# V√©rifier si c'est un d√©ploiement local ou Cloud
is_cloud = os.environ.get("STREAMLIT_DEPLOYMENT_TYPE") == "cloud"
st.subheader("Type de d√©ploiement")
st.info("‚òÅÔ∏è D√©ploiement Streamlit Cloud" if is_cloud else "üñ•Ô∏è D√©ploiement local")

# V√©rifier les fichiers existants
st.header("Structure du projet")
try:
    # Liste des fichiers importants √† v√©rifier
    important_files = [
        "Home.py",
        "pages/test_api.py",
        "pages/1_üìù_Brief.py",
        "pages/7_ü§ñ_Assistant_IA.py",
        "requirements.txt",
        "utils.py"
    ]
    
    file_status = []
    for file in important_files:
        exists = os.path.exists(file)
        size = os.path.getsize(file) if exists else 0
        timestamp = time.ctime(os.path.getmtime(file)) if exists else "N/A"
        file_status.append({
            "Fichier": file,
            "Existe": "‚úÖ" if exists else "‚ùå",
            "Taille": f"{size} octets" if exists else "0",
            "Derni√®re modification": timestamp
        })
    
    st.dataframe(pd.DataFrame(file_status))
except Exception as e:
    st.error(f"Erreur lors de la v√©rification des fichiers: {str(e)}")

# V√©rifier la pr√©sence et la version de git
st.header("Informations Git")
try:
    git_version = subprocess.check_output(["git", "--version"]).decode().strip()
    st.code(git_version)
    
    # R√©cup√©rer la version Git
    commit_hash = subprocess.check_output(["git", "rev-parse", "--short", "HEAD"]).decode().strip()
    branch = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"]).decode().strip()
    
    st.write(f"**Branche actuelle:** {branch}")
    st.write(f"**Dernier commit:** {commit_hash}")
    
    # Afficher les 5 derniers commits
    st.subheader("5 derniers commits")
    git_log = subprocess.check_output(["git", "log", "-n", "5", "--pretty=format:%h - %s (%ar)"]).decode().strip()
    st.code(git_log)
    
    # V√©rifier si des fichiers ont √©t√© modifi√©s
    git_status = subprocess.check_output(["git", "status", "-s"]).decode().strip()
    if git_status:
        st.warning("‚ö†Ô∏è Il y a des fichiers modifi√©s non commit√©s:")
        st.code(git_status)
    else:
        st.success("‚úÖ Tous les fichiers sont commit√©s")
        
except Exception as e:
    st.error(f"Erreur Git: {str(e)}")

# V√©rifier les secrets disponibles
st.header("Secrets")
st.info("""
Cette section ne montre pas les valeurs des secrets pour des raisons de s√©curit√©.
Elle indique uniquement si les cl√©s sont d√©finies dans st.secrets.
""")

try:
    available_secrets = []
    for key in ["DEEPSEEK_API_KEY", "GROQ_API_KEY", "GITHUB_TOKEN"]:
        try:
            exists = key in st.secrets
            value_status = "D√©fini" if exists else "Non d√©fini"
            available_secrets.append({"Secret": key, "Statut": value_status})
        except:
            available_secrets.append({"Secret": key, "Statut": "Erreur d'acc√®s"})
    
    st.dataframe(pd.DataFrame(available_secrets))
except Exception as e:
    st.error(f"Erreur lors de la v√©rification des secrets: {str(e)}")

# Section pour v√©rifier les performances
st.header("Test de performances")
if st.button("Ex√©cuter test de performances"):
    with st.spinner("Test en cours..."):
        start_time = time.time()
        
        # Test pandas
        df = pd.DataFrame({"A": range(10000), "B": range(10000)})
        df_result = df.groupby(df["A"] % 10).sum()
        
        # Test boucle Python
        result = 0
        for i in range(100000):
            result += i
            
        end_time = time.time()
        duration = end_time - start_time
        
        st.success(f"Test compl√©t√© en {duration:.2f} secondes")
        st.metric("Temps d'ex√©cution", f"{duration:.2f}s")

# Section de notes additionnelles
st.header("Probl√®mes connus de d√©ploiement")
st.info("""
Si votre application est bloqu√©e sur "Your app is in the oven", voici quelques causes possibles:

1. **Probl√®mes avec requirements.txt** - V√©rifiez s'il y a des versions incompatibles ou des packages probl√©matiques
2. **Erreur de construction silencieuse** - V√©rifiez les logs de build dans Streamlit Cloud
3. **Probl√®me de m√©moire** - Si l'app charge des fichiers volumineux au d√©marrage, elle peut d√©passer les limites
4. **Timeout** - Si l'initialisation prend trop de temps, le d√©ploiement peut √©chouer

Solutions possibles:
- Redeployer manuellement depuis l'interface Streamlit Cloud
- V√©rifier qu'aucun import ou code au niveau global ne cause de plantage
- Consid√©rer un petit commit de "no-op" pour d√©clencher un nouveau build
""")

st.divider()
st.caption("Diagnostic de d√©ploiement cr√©√© pour aider avec les probl√®mes Streamlit Cloud")