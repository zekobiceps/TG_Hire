import streamlit as st
import requests
from datetime import datetime
import json

# Configuration de l'outil
st.set_page_config(
    page_title="G√©n√©rateur de Lettres RH - TGCC",
    page_icon="üìù",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuration pour l'appel √† l'IA DeepSeek
SYSTEM_PROMPT = """
Tu es un expert en r√©daction de lettres officielles pour les entreprises du BTP au Maroc.
Tu ma√Ætrises parfaitement :
1. Les codes de la correspondance administrative marocaine
2. Le vocabulaire technique du BTP
3. Les protocoles de nomination et d'annonce de recrutement
4. Le ton professionnel et respectueux requis

Tes lettres doivent √™tre :
- Formelles et respectueuses
- Structur√©es selon les normes administratives marocaines
- Adapt√©es au contexte du BTP
- Personnalis√©es selon les informations fournies
"""

def get_deepseek_response(prompt, length="normale"):
    """Appel √† l'API DeepSeek pour g√©n√©ration de lettres"""
    api_key = st.secrets.get("DEEPSEEK_API_KEY")
    if not api_key:
        return {"content": "Erreur: Cl√© API DeepSeek manquante.", "usage": 0}
    
    final_prompt = f"{prompt}\n\n(Instruction: Fournir une r√©ponse de longueur '{length}')"
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": final_prompt}
    ]
    
    try:
        response = requests.post(
            "https://api.deepseek.com/v1/chat/completions",
            headers={
                "Content-Type": "application/json", 
                "Authorization": f"Bearer {api_key}"
            },
            json={
                "model": "deepseek-chat", 
                "messages": messages, 
                "max_tokens": 2048
            }
        )
        response.raise_for_status()
        data = response.json()
        content = data["choices"][0]["message"]["content"]
        usage = data.get("usage", {}).get("total_tokens", 0)
        
        return {"content": content, "usage": usage}
    except Exception as e:
        return {"content": f"‚ùå Erreur API DeepSeek: {e}", "usage": 0}

# Interface principale
st.title("üìù G√©n√©rateur de Lettres RH - TGCC")
st.markdown("---")

# Sidebar avec les statistiques (simple pour l'instant)
with st.sidebar:
    st.subheader("üìä Statistiques")
    st.metric("üîë Session", 0)
    st.metric("üìä Total", 0)
    st.markdown("---")
    st.info("üí° G√©n√©rateur IA de lettres officielles")

# Choix du type de lettre
type_lettre = st.selectbox(
    "üìã Type de lettre √† g√©n√©rer",
    [
        "Lettre de nomination",
        "Annonce de nouvelle recrue",
        "Lettre de f√©licitations",
        "Communiqu√© interne"
    ],
    help="S√©lectionnez le type de document √† g√©n√©rer"
)

st.markdown("### ‚ÑπÔ∏è Informations du candidat/employ√©")

# Formulaire d'informations
col1, col2 = st.columns(2)

with col1:
    prenom = st.text_input("Pr√©nom", placeholder="Mohamed")
    nom = st.text_input("Nom", placeholder="ALAMI")
    genre = st.selectbox("Genre", ["Monsieur", "Madame"])
    
with col2:
    poste = st.text_input("Poste/Fonction", placeholder="Directeur Technique")
    entreprise = st.selectbox(
        "Entreprise/Filiale", 
        ["TGCC", "TG ALU", "TG COVER", "TG WOOD", "TG STEEL", "TG STONE", "TGEM", "TGCC Immobilier"]
    )
    date_prise_fonction = st.date_input("Date de prise de fonction", datetime.now())

# Informations compl√©mentaires selon le type de lettre
st.markdown("### üìÑ D√©tails compl√©mentaires")

if type_lettre == "Lettre de nomination":
    col3, col4 = st.columns(2)
    with col3:
        poste_precedent = st.text_input("Poste pr√©c√©dent (optionnel)", placeholder="Chef de projet")
        departement = st.text_input("D√©partement/Service", placeholder="Direction Technique")
    with col4:
        superviseur = st.text_input("Sup√©rieur hi√©rarchique", placeholder="Directeur G√©n√©ral")
        lieu_travail = st.text_input("Lieu de travail", placeholder="Casablanca - Si√®ge social")

elif type_lettre == "Annonce de nouvelle recrue":
    col3, col4 = st.columns(2)
    with col3:
        experience = st.text_input("Exp√©rience professionnelle", placeholder="5 ans d'exp√©rience en BTP")
        formation = st.text_input("Formation", placeholder="Ing√©nieur Civil - EHTP")
    with col4:
        competences = st.text_area("Comp√©tences cl√©s", placeholder="Gestion de projet, AutoCAD, Management d'√©quipe")
        projets_precedents = st.text_area("Projets/Entreprises pr√©c√©dents", placeholder="Participation aux projets X, Y, Z")

# Fiche de poste (optionnelle pour enrichir la g√©n√©ration)
st.markdown("### üìã Fiche de poste (optionnel - pour enrichissement IA)")
fiche_poste = st.text_area(
    "Collez ici la fiche de poste compl√®te:",
    height=150,
    placeholder="Mission: ...\nResponsabilit√©s: ...\nProfil recherch√©: ...\nComp√©tences requises: ...\nExp√©rience: ...\nFormation: ..."
)

# Param√®tres de g√©n√©ration
st.markdown("### ‚öôÔ∏è Param√®tres de g√©n√©ration")
col5, col6 = st.columns(2)
with col5:
    ton_lettre = st.selectbox("Ton de la lettre", ["Formel", "Chaleureux", "Officiel", "Convivial"])
    longueur = st.selectbox("Longueur", ["Courte", "Normale", "D√©taill√©e"])
with col6:
    inclure_coordonnees = st.checkbox("Inclure coordonn√©es entreprise", value=True)
    inclure_signature = st.checkbox("Inclure zone de signature", value=True)

# Bouton de g√©n√©ration
if st.button("‚ú® G√©n√©rer la lettre", type="primary", use_container_width=True):
    if not prenom or not nom or not poste:
        st.error("‚ö†Ô∏è Veuillez remplir au minimum : Pr√©nom, Nom et Poste")
    else:
        with st.spinner("ü§ñ G√©n√©ration de la lettre en cours..."):
            # Construction du prompt selon le type de lettre
            if type_lettre == "Lettre de nomination":
                prompt = f"""
                G√©n√®re une lettre de nomination officielle avec les informations suivantes :
                
                **Informations personnelles :**
                - {genre} {prenom} {nom.upper()}
                - Nouveau poste : {poste}
                - Entreprise : {entreprise}
                - Date de prise de fonction : {date_prise_fonction.strftime('%d/%m/%Y')}
                - Poste pr√©c√©dent : {poste_precedent if poste_precedent else 'Non sp√©cifi√©'}
                - D√©partement : {departement if departement else 'Non sp√©cifi√©'}
                - Sup√©rieur hi√©rarchique : {superviseur if superviseur else 'Direction'}
                - Lieu de travail : {lieu_travail if lieu_travail else 'Maroc'}
                
                **Fiche de poste :**
                {fiche_poste if fiche_poste else 'Non fournie'}
                
                **Style demand√© :** {ton_lettre}
                
                G√©n√®re une lettre de nomination compl√®te, structur√©e et professionnelle.
                {'Inclus les coordonn√©es de TGCC en en-t√™te.' if inclure_coordonnees else ''}
                {'Inclus une zone de signature √† la fin.' if inclure_signature else ''}
                """
                
            elif type_lettre == "Annonce de nouvelle recrue":
                prompt = f"""
                G√©n√®re une annonce de nouvelle recrue avec les informations suivantes :
                
                **Nouveau collaborateur :**
                - {genre} {prenom} {nom.upper()}
                - Poste : {poste}
                - Entreprise : {entreprise}
                - Date d'arriv√©e : {date_prise_fonction.strftime('%d/%m/%Y')}
                - Exp√©rience : {experience if experience else 'Non sp√©cifi√©e'}
                - Formation : {formation if formation else 'Non sp√©cifi√©e'}
                - Comp√©tences : {competences if competences else 'Non sp√©cifi√©es'}
                - Exp√©rience pr√©c√©dente : {projets_precedents if projets_precedents else 'Non sp√©cifi√©e'}
                
                **Fiche de poste :**
                {fiche_poste if fiche_poste else 'Non fournie'}
                
                **Style demand√© :** {ton_lettre}
                
                G√©n√®re une annonce interne accueillante et professionnelle pour pr√©senter le nouveau collaborateur.
                {'Inclus les coordonn√©es de TGCC en en-t√™te.' if inclure_coordonnees else ''}
                """
            
            # Appel √† l'IA
            result = get_deepseek_response(prompt, longueur.lower())
            
            if result.get("content") and "Erreur:" not in result["content"]:
                st.markdown("### üìù Lettre g√©n√©r√©e")
                st.markdown("---")
                
                # Affichage de la lettre dans une zone copiable
                lettre_content = result["content"]
                st.text_area(
                    "Votre lettre :",
                    value=lettre_content,
                    height=400,
                    help="Vous pouvez copier le contenu et le coller dans Word ou votre √©diteur pr√©f√©r√©"
                )
                
                # Boutons d'action
                col7, col8, col9 = st.columns(3)
                with col7:
                    st.download_button(
                        label="üì• T√©l√©charger (.txt)",
                        data=lettre_content,
                        file_name=f"lettre_{type_lettre.lower().replace(' ', '_')}_{nom}_{datetime.now().strftime('%Y%m%d')}.txt",
                        mime="text/plain",
                        use_container_width=True
                    )
                
                with col8:
                    if st.button("üîÑ R√©g√©n√©rer", use_container_width=True):
                        st.rerun()
                
                with col9:
                    if st.button("üíæ Sauvegarder mod√®le", use_container_width=True):
                        st.success("‚úÖ Mod√®le sauvegard√© !")
                
                # Statistiques de g√©n√©ration
                st.info(f"üìä Tokens utilis√©s : {result.get('usage', 0)}")
                
            else:
                st.error("‚ùå Erreur lors de la g√©n√©ration de la lettre")
                if result.get("content"):
                    st.error(result["content"])

# Section d'aide
with st.expander("‚ùì Guide d'utilisation", expanded=False):
    st.markdown("""
    ### üìã Comment utiliser cet outil
    
    1. **Choisissez le type de lettre** - Nomination, annonce de recrue, etc.
    2. **Remplissez les informations** - Nom, pr√©nom, poste, entreprise
    3. **Ajoutez les d√©tails** - Selon le type de lettre choisi
    4. **Collez la fiche de poste** (optionnel) - Pour une g√©n√©ration plus pr√©cise
    5. **Configurez les param√®tres** - Ton, longueur, options d'affichage
    6. **G√©n√©rez la lettre** - L'IA cr√©e une lettre personnalis√©e
    7. **T√©l√©chargez ou copiez** - R√©cup√©rez votre document final
    
    ### üí° Conseils pour de meilleurs r√©sultats
    - Remplissez un maximum d'informations
    - Utilisez la fiche de poste pour plus de pr√©cision
    - Choisissez le ton appropri√© √† votre contexte
    - Relisez et ajustez selon vos besoins
    """)