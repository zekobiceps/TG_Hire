import streamlit as st
import pandas as pd
import io
import json 
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import os

# --- IMPORTS POUR GOOGLE API ---
try:
    from google.oauth2 import service_account
    from googleapiclient.discovery import build
    import gspread
except ImportError:
    st.error("‚ùå Biblioth√®ques Google API manquantes. Ex√©cutez : pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib gspread")
    st.stop()

# --- CONFIGURATION GOOGLE SHEETS ---
GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/1p8gSC84LZllAaTT6F88xH8nVqZS9jLiOlqiPXHLmJhU/edit"
WORKSHEET_NAME = "HR_Dossiers"
HISTORY_SHEET_NAME = "Relance_History"
SCHEDULED_SHEET_NAME = "Scheduled_Relances"

# Configuration de la page
st.set_page_config(
    page_title="Suivi des Dossiers RH - TGCC",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #1e88e5;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    .complete-status {
        background-color: #d4edda;
        color: #155724;
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
    }
    .incomplete-status {
        background-color: #f8d7da;
        color: #721c24;
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
    .stTabs [data-baseweb="tab"] {
        background-color: white;
        border-radius: 4px;
        padding: 10px 16px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    .stTabs [data-baseweb="tab"][aria-selected="true"] {
        background-color: #e3f2fd;
        border-bottom: 2px solid #1e88e5;
    }
    
    /* Optimisation des tableaux */
    .stDataFrame {
        font-size: 0.85rem;
    }
    .stDataFrame table {
        margin: 0 auto;
        max-width: 95%;
    }
    .stDataFrame th {
        text-align: center !important;
        padding: 8px 4px !important;
        font-size: 0.8rem;
        font-weight: 600;
    }
    .stDataFrame td {
        text-align: center !important;
        padding: 6px 4px !important;
        font-size: 0.8rem;
    }
</style>
""", unsafe_allow_html=True)

# D√©finition des documents RH standard
DOCUMENTS_RH = [
    "Curriculum vitae actualis√©",
    "3 copies certifi√©es conformes des dipl√¥mes obtenus et/ou des certificats de scolarit√©",
    "Copie certifi√©e conforme des certificats de travail des employeurs pr√©c√©dents",
    "3 derniers bulletins de paie d√©livr√©s par l'employeur pr√©c√©dent",
    "Certificat de r√©sidence datant d'au moins 3 mois",
    "Copie certifi√©e conforme de votre C.I.N.",
    "Extrait d'acte de naissance en fran√ßais",
    "Copie de la carte C.N.S.S (ou copie de la C.I.N + 2 photos d'identit√© r√©centes)",
    "Fiche anthropom√©trique originale datant d'au moins 3 mois",
    "2 photos d'identit√© identique datant d'au moins 3 mois (Format standard)",
    "Copie du permis de conduire",
    "Relev√© d'Identit√© Bancaire (RIB) comportant les 24 chiffres",
    "Copie certifi√©e conforme de l'acte de mariage",
    "Copie de la CIN du conjoint",
    "Extrait d'acte de naissance de chaque enfant",
    "Fiche de renseignement d√ªment remplie et sign√©e par le salari√©",
    "Contrat de travail en double exemplaire √† signer et √† l√©galiser",
    "Check-list d'int√©gration sign√©e par votre N+1/tuteur/la DSI et la DQHSE",
    "Annexes du code de bonne conduite sign√©es par vos soins",
    "Photo au format digital, 600*600 pixels sur fond blanc",
    "R√©capitulatif de carri√®re CNSS (t√©l√©chargeable sur l'application MACNSS)"
]

# -------------------- FONCTIONS D'AUTHENTIFICATION GOOGLE --------------------
def get_google_credentials():
    """Cr√©e les identifiants √† partir des secrets Streamlit."""
    try:
        service_account_info = {
            "type": st.secrets["GCP_TYPE"],
            "project_id": st.secrets["GCP_PROJECT_ID"],
            "private_key_id": st.secrets.get("GCP_PRIVATE_KEY_ID", ""),
            "private_key": st.secrets["GCP_PRIVATE_KEY"].replace('\\n', '\n'),
            "client_email": st.secrets["GCP_CLIENT_EMAIL"],
            "client_id": st.secrets.get("GCP_CLIENT_ID", ""),
            "auth_uri": st.secrets.get("GCP_AUTH_URI", "https://accounts.google.com/o/oauth2/auth"),
            "token_uri": st.secrets["GCP_TOKEN_URI"],
            "auth_provider_x509_cert_url": st.secrets.get("GCP_AUTH_PROVIDER_CERT_URL", "https://www.googleapis.com/oauth2/v1/certs"),
            "client_x509_cert_url": st.secrets.get("GCP_CLIENT_CERT_URL", "")
        }
        return service_account.Credentials.from_service_account_info(service_account_info)
    except Exception as e:
        st.error(f"‚ùå Erreur de format des secrets Google: {e}")
        return None

def get_gsheet_client():
    """Authentification pour Google Sheets."""
    try:
        creds = get_google_credentials()
        if creds:
            scoped_creds = creds.with_scopes([
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive.readonly",
            ])
            gc = gspread.Client(auth=scoped_creds)
            return gc
    except Exception as e:
        st.error(f"‚ùå Erreur d'authentification Google Sheets: {str(e)}")
    return None

# -------------------- FONCTIONS GOOGLE SHEETS --------------------
@st.cache_data(ttl=60)  # Cache pendant 1 minute
def load_data_from_gsheet():
    """Charge les donn√©es depuis Google Sheets"""
    try:
        gc = get_gsheet_client()
        if not gc:
            return pd.DataFrame()
        
        sheet = gc.open_by_url(GOOGLE_SHEET_URL).worksheet(WORKSHEET_NAME)
        data = sheet.get_all_records()
        
        if not data:
            # Cr√©er les en-t√™tes si la feuille est vide
            headers = ['Nom', 'Pr√©nom', 'Poste', 'Service', 'T√©l√©phone', 'Email', 'Date_integration', 
                      'Documents_manquants', 'Statut', 'Derniere_relance', 'Nombre_relances',
                      'Date_creation', 'Date_modification']
            sheet.clear()
            sheet.append_row(headers)
            return pd.DataFrame(columns=headers)
        
        df = pd.DataFrame(data)
        return df
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement des donn√©es Google Sheets: {e}")
        return pd.DataFrame()

def save_data_to_gsheet(df):
    """Sauvegarde les donn√©es dans Google Sheets"""
    try:
        gc = get_gsheet_client()
        if not gc:
            return False
        
        sheet = gc.open_by_url(GOOGLE_SHEET_URL).worksheet(WORKSHEET_NAME)
        
        # Vider la feuille et r√©√©crire toutes les donn√©es
        sheet.clear()
        
        # Ajouter les en-t√™tes
        headers = list(df.columns)
        sheet.append_row(headers)
        
        # Ajouter les donn√©es
        if len(df) > 0:
            values = df.fillna('').values.tolist()
            sheet.append_rows(values)
        
        return True
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la sauvegarde Google Sheets: {e}")
        return False


def _load_df_from_worksheet(worksheet_name, default_headers=None):
    """Charge un DataFrame depuis une worksheet sp√©cifique. Si la worksheet n'existe pas,
    renvoie un DataFrame vide avec les en-t√™tes fournis (si fournis).
    """
    try:
        gc = get_gsheet_client()
        if not gc:
            return pd.DataFrame(columns=default_headers) if default_headers else pd.DataFrame()

        sheet = gc.open_by_url(GOOGLE_SHEET_URL)
        try:
            ws = sheet.worksheet(worksheet_name)
        except Exception:
            # Worksheet manquante
            return pd.DataFrame(columns=default_headers) if default_headers else pd.DataFrame()

        data = ws.get_all_records()
        if not data:
            return pd.DataFrame(columns=default_headers) if default_headers else pd.DataFrame()

        return pd.DataFrame(data)
    except Exception as e:
        # Ne pas interrompre l'app: afficher en console et renvoyer vide
        print(f"Erreur chargement worksheet {worksheet_name}: {e}")
        return pd.DataFrame(columns=default_headers) if default_headers else pd.DataFrame()


def _save_df_to_worksheet(df, worksheet_name):
    """Sauvegarde un DataFrame dans une worksheet sp√©cifique; cr√©e la worksheet si n√©cessaire."""
    try:
        gc = get_gsheet_client()
        if not gc:
            return False

        sh = gc.open_by_url(GOOGLE_SHEET_URL)
        try:
            ws = sh.worksheet(worksheet_name)
            ws.clear()
        except Exception:
            # cr√©er la worksheet si elle n'existe pas
            rows = max(10, len(df) + 10)
            cols = max(1, len(df.columns))
            ws = sh.add_worksheet(title=worksheet_name, rows=str(rows), cols=str(cols))

        headers = list(df.columns)
        ws.append_row(headers)
        if len(df) > 0:
            ws.append_rows(df.fillna('').values.tolist())
        return True
    except Exception as e:
        print(f"Erreur sauvegarde worksheet {worksheet_name}: {e}")
        return False


def load_relance_history_from_gsheet():
    headers = ['Date', 'Collaborateur', 'Email', 'Documents_relances', 'Statut_envoi', 'Email_body']
    return _load_df_from_worksheet(HISTORY_SHEET_NAME, default_headers=headers)


def save_relance_history_to_gsheet(df):
    return _save_df_to_worksheet(df, HISTORY_SHEET_NAME)


def load_scheduled_relances_from_gsheet():
    headers = ['Date_programmee', 'Collaborateur', 'Email', 'Documents_relances', 'Date_limite', 'Statut', 'Actor_email', 'CC', 'Email_body']
    return _load_df_from_worksheet(SCHEDULED_SHEET_NAME, default_headers=headers)


def save_scheduled_relances_to_gsheet(df):
    return _save_df_to_worksheet(df, SCHEDULED_SHEET_NAME)


def add_row_to_gsheet(new_row_data):
    """Ajoute une nouvelle ligne √† Google Sheets"""
    try:
        gc = get_gsheet_client()
        if not gc:
            return False
        
        sheet = gc.open_by_url(GOOGLE_SHEET_URL).worksheet(WORKSHEET_NAME)
        sheet.append_row(new_row_data)
        return True
    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'ajout de ligne Google Sheets: {e}")
        return False

def update_row_in_gsheet(row_index, updated_data):
    """Met √† jour une ligne sp√©cifique dans Google Sheets"""
    try:
        gc = get_gsheet_client()
        if not gc:
            return False
        
        sheet = gc.open_by_url(GOOGLE_SHEET_URL).worksheet(WORKSHEET_NAME)
        
        # row_index + 2 car : +1 pour l'index Python (0-based) vers Google Sheets (1-based), +1 pour ignorer l'en-t√™te
        for col_idx, value in enumerate(updated_data, start=1):
            # Convertir les valeurs NaN en cha√Ænes vides
            cell_value = '' if pd.isna(value) else str(value)
            sheet.update_cell(row_index + 2, col_idx, cell_value)
        
        return True
    except Exception as e:
        # Log l'erreur sans afficher le message transitoire
        print(f"Erreur Google Sheets (masqu√©e): {e}")
        return False
# --- Normalisation centralis√©e (d√©finie une seule fois) ---
def normalize_hr_database(df):
    """Normalise les colonnes et types du DataFrame HR pour √©viter les probl√®mes
    si l'en-t√™te de la feuille change entre 'Service' et 'Affectation'."""
    if df is None:
        return df
    if isinstance(df, pd.DataFrame) and df.empty:
        return df
    # Supporter √† la fois 'Service' et 'Affectation'
    try:
        cols = list(df.columns)
    except Exception:
        return df
    if 'Affectation' in df.columns and 'Service' not in df.columns:
        df['Service'] = df['Affectation']
    if 'Service' in df.columns and 'Affectation' not in df.columns:
        df['Affectation'] = df['Service']
    # Nombre_relances en int
    if 'Nombre_relances' in df.columns:
        df['Nombre_relances'] = pd.to_numeric(df['Nombre_relances'], errors='coerce').fillna(0).astype(int)
    else:
        df['Nombre_relances'] = 0
    # Documents_manquants assurer string JSON
    if 'Documents_manquants' in df.columns:
        df['Documents_manquants'] = df['Documents_manquants'].fillna('[]').astype(str)
    else:
        df['Documents_manquants'] = '[]'
    return df

# Initialisation des donn√©es en session
if 'hr_database' not in st.session_state:
    st.session_state.hr_database = load_data_from_gsheet()
    # Normaliser les colonnes/types imm√©diatement
    st.session_state.hr_database = normalize_hr_database(st.session_state.hr_database)

# Si on vient de recharger (flag), afficher le message de succ√®s puis effacer le flag
if st.session_state.get('_last_reload_successful', False):
    st.success("‚úÖ Donn√©es recharg√©es depuis Google Sheets!")
    st.session_state['_last_reload_successful'] = False

if 'relance_history' not in st.session_state:
    # Charger depuis Google Sheets si disponible
    loaded_hist = load_relance_history_from_gsheet()
    if loaded_hist is not None and len(loaded_hist) > 0:
        st.session_state.relance_history = loaded_hist
    else:
        st.session_state.relance_history = pd.DataFrame(columns=[
            'Date', 'Collaborateur', 'Email', 'Documents_relances', 'Statut_envoi', 'Email_body'
        ])

if 'scheduled_relances' not in st.session_state:
    loaded_sched = load_scheduled_relances_from_gsheet()
    if loaded_sched is not None and len(loaded_sched) > 0:
        st.session_state.scheduled_relances = loaded_sched
    else:
        st.session_state.scheduled_relances = pd.DataFrame(columns=[
            'Date_programmee', 'Collaborateur', 'Email', 'Documents_relances', 'Date_limite', 'Statut', 'Actor_email', 'CC', 'Email_body'
        ])

    # -- Debug helper UI: afficher en un clic les en-t√™tes bruts lus et un aper√ßu des donn√©es --
    with st.expander("üîç Debug: voir en-t√™tes bruts et aper√ßu (temporaire)"):
        if st.button("üîÑ Charger et afficher l'aper√ßu brut des donn√©es depuis Google Sheets"):
            # Lire directement via le helper bas-niveau pour voir ce qui est lu
            raw = _load_df_from_worksheet(WORKSHEET_NAME)
            st.markdown("**En-t√™tes lus (raw):**")
            try:
                st.write(list(raw.columns))
            except Exception as e:
                st.write(f"Impossible d'afficher les en-t√™tes: {e}")

            st.markdown("**Colonnes du DataFrame normalis√© en session:**")
            try:
                st.write(list(st.session_state.hr_database.columns))
            except Exception as e:
                st.write(f"Impossible d'afficher les colonnes de st.session_state.hr_database: {e}")

            st.markdown("**Aper√ßu (head(10)) du DataFrame en session:**")
            try:
                st.dataframe(st.session_state.hr_database.head(10))
            except Exception as e:
                st.write(f"Impossible d'afficher l'aper√ßu: {e}")

# Fonctions utilitaires
def save_data():
    """Sauvegarde les donn√©es dans Google Sheets"""
    return save_data_to_gsheet(st.session_state.hr_database)

def load_data():
    """Recharge les donn√©es depuis Google Sheets"""
    try:
        # Lire directement depuis la worksheet (bypass du cache) puis normaliser
        raw = _load_df_from_worksheet(WORKSHEET_NAME)
        if raw is None:
            return False
        st.session_state.hr_database = normalize_hr_database(raw)
        return True
    except Exception as e:
        st.error(f"Erreur lors du rechargement: {e}")
        return False

def calculate_completion_percentage():
    """Calcule le pourcentage de dossiers complets"""
    if len(st.session_state.hr_database) == 0:
        return 0
    complete_count = len(st.session_state.hr_database[st.session_state.hr_database['Statut'] == 'Complet'])
    return (complete_count / len(st.session_state.hr_database)) * 100

def get_missing_documents_count(documents_json):
    """Compte le nombre de documents manquants"""
    try:
        docs = json.loads(documents_json)
        return len(docs)
    except:
        return 0


def normalize_hr_database(df):
    """Normalise les colonnes et types du DataFrame HR pour √©viter les probl√®mes
    si l'en-t√™te de la feuille change entre 'Service' et 'Affectation'."""
    if df is None or len(df) == 0:
        return df
    # Supporter √† la fois 'Service' et 'Affectation'
    if 'Affectation' in df.columns and 'Service' not in df.columns:
        df['Service'] = df['Affectation']
    if 'Service' in df.columns and 'Affectation' not in df.columns:
        df['Affectation'] = df['Service']
    # Nombre_relances en int
    if 'Nombre_relances' in df.columns:
        df['Nombre_relances'] = pd.to_numeric(df['Nombre_relances'], errors='coerce').fillna(0).astype(int)
    else:
        df['Nombre_relances'] = 0
    # Documents_manquants assurer string JSON
    if 'Documents_manquants' in df.columns:
        df['Documents_manquants'] = df['Documents_manquants'].fillna('[]').astype(str)
    else:
        df['Documents_manquants'] = '[]'
    return df

def send_email_reminder(
    recipient_email,
    recipient_name,
    missing_docs,
    delay_date=None,
    custom_body=None,
    actor_email=None,
    cc_emails=None
):
    """Envoie un email de relance via SMTP.

    - actor_name / actor_email : informations facultatives de la personne qui d√©clenche l'envoi
      (utilis√©es pour Reply-To et pour afficher "Envoy√© par" dans le corps).
    - cc_emails : cha√Æne s√©par√©e par des virgules ou liste d'emails √† mettre en copie.
    """
    try:
        # Configuration SMTP - utiliser les secrets Streamlit
        smtp_server = st.secrets.get("SMTP_SERVER", "smtp.gmail.com")
        smtp_port = int(st.secrets.get("SMTP_PORT", 587))
        # Valeur par d√©faut pratique si l'utilisateur n'a pas encore ajout√© le secret
        default_sender = "recrutement@tgcc.ma"
        sender_email = st.secrets.get("SENDER_EMAIL", default_sender)
        sender_password = st.secrets.get("SENDER_PASSWORD", "")
        
        if not sender_email or not sender_password:
            st.error("‚ùå Configuration email manquante. Veuillez configurer SENDER_EMAIL et SENDER_PASSWORD dans les secrets.")
            return False

        # Pr√©parer la liste des CC
        cc_list = []
        if cc_emails:
            if isinstance(cc_emails, str):
                # s√©parer par virgule et nettoyer
                cc_list = [e.strip() for e in cc_emails.split(',') if e.strip()]
            elif isinstance(cc_emails, (list, tuple)):
                cc_list = [e.strip() for e in cc_emails if str(e).strip()]

        # Utiliser le corps personnalis√© s'il est fourni, sinon utiliser le template par d√©faut
        if custom_body:
            body = custom_body
        else:
            # Cr√©er le corps du message avec le template par d√©faut
            docs_list = '\n'.join([f"‚Ä¢ {doc}" for doc in missing_docs])
            body = f"""Bonjour {recipient_name},

Merci de noter que votre dossier administratif RH demeure incomplet √† ce jour.
Merci de remettre les √©l√©ments suivants afin de le compl√©ter:

{docs_list}

Les documents doivent √™tre envoy√©s via le pointeur chantier dans une enveloppe ferm√©e, en mentionnant CONFIDENTIEL et A L'ATTENTION DE M.L'EQUIPE RECRUTEMENT.

Merci de noter que le dernier d√©lai pour compl√©ter votre dossier c'est le {delay_date if delay_date else (datetime.now() + timedelta(days=14)).strftime('%d/%m/%Y')}

Comptant sur votre pr√©cieuse collaboration.

Cordialement"""

        # Pr√©fixer par qui envoie si un Reply-To est fourni (on utilise l'email)
        if actor_email:
            sender_info = actor_email
            body = f"Envoy√© par : {sender_info}\n\n" + body

        # Cr√©er le message
        message = MIMEMultipart()
        message['From'] = sender_email
        message['To'] = recipient_email
        if cc_list:
            message['Cc'] = ', '.join(cc_list)
        message['Subject'] = "URGENT: Compl√©ment du dossier administrative RH"

        # Reply-To vers la personne qui effectue l'envoi (facultatif)
        if actor_email:
            message.add_header('Reply-To', actor_email)

        message.attach(MIMEText(body, 'plain', 'utf-8'))

        # Destinataires effectifs
        recipients = [recipient_email] + cc_list

        # Envoyer l'email via SMTP
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()  # Activer la s√©curit√©
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, recipients, message.as_string())

        return True
    except Exception as e:
        st.error(f"Erreur lors de l'envoi de l'email via SMTP: {e}")
        return False

# Titre principal
st.markdown('<h1 class="main-header">üìã Suivi des Dossiers RH</h1>', unsafe_allow_html=True)
st.markdown("---")

# Cr√©er les onglets
tab1, tab2, tab3 = st.tabs([
    "üìä Suivi Global",
    "üë§ Gestion Collaborateur", 
    "üìß Relances Automatiques"
])

    # ============================
# ONGLET 1: SUIVI GLOBAL
# ============================
with tab1:
    st.header("üìä Vue d'ensemble des dossiers RH")
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_collaborateurs = len(st.session_state.hr_database)
        st.metric("üë• Total Collaborateurs", total_collaborateurs)
    
    with col2:
        complete_count = len(st.session_state.hr_database[st.session_state.hr_database['Statut'] == 'Complet'])
        st.metric("‚úÖ Dossiers Complets", complete_count)
    
    with col3:
        incomplete_count = total_collaborateurs - complete_count
        st.metric("‚è≥ Dossiers En Cours", incomplete_count)
    
    with col4:
        completion_rate = calculate_completion_percentage()
        st.metric("üìà Taux de Compl√©tude", f"{completion_rate:.1f}%")
    
    # Ne pas afficher la ligne de pourcentage demand√©e (supprim√©e)
    
    # Graphiques
    col_chart1, col_chart2 = st.columns(2)
    
    with col_chart1:
        # Graphique en secteurs - R√©partition des statuts
        status_counts = st.session_state.hr_database['Statut'].value_counts()
        fig_pie = px.pie(
            values=status_counts.values, 
            names=status_counts.index,
            title="R√©partition des Statuts",
            color_discrete_map={'Complet': '#28a745', 'En cours': '#ffc107'}
        )
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col_chart2:
        # Graphique en barres - Par affectation
        # Construire une colonne d'affichage 'Affectation_display' pour regrouper correctement
        tmp_hr = st.session_state.hr_database.copy()
        if 'Affectation' in tmp_hr.columns:
            tmp_hr['Affectation_display'] = tmp_hr['Affectation']
        else:
            tmp_hr['Affectation_display'] = tmp_hr['Service'] if 'Service' in tmp_hr.columns else ''
        service_stats = tmp_hr.groupby(['Affectation_display', 'Statut']).size().unstack(fill_value=0)

        # Guard: si aucune donn√©e disponible
        if service_stats.empty:
            st.info("Aucune donn√©e par service disponible pour l'instant.")
        else:
            df_service = service_stats.reset_index()
            # D√©terminer les colonnes y disponibles (√©vite ShapeError si une colonne manque)
            desired_cols = ['Complet', 'En cours']
            y_cols = [c for c in desired_cols if c in service_stats.columns]

            if not y_cols:
                st.info("Aucune colonne de statut standard ('Complet'/'En cours') trouv√©e pour les services.")
            else:
                try:
                    # D√©terminer la colonne d'axe X : pr√©f√©rer 'Affectation_display' puis 'Service'
                    if 'Affectation_display' in df_service.columns:
                        xcol = 'Affectation_display'
                    elif 'Service' in df_service.columns:
                        xcol = 'Service'
                    else:
                        # fallback sur la premi√®re colonne (s√©curit√©)
                        xcol = df_service.columns[0]

                    fig_bar = px.bar(
                        df_service,
                        x=xcol,
                        y=y_cols,
                        title="Statuts par Affectation",
                        color_discrete_map={'Complet': '#28a745', 'En cours': '#ffc107'}
                    )
                    # Ajouter les labels de valeur par pile
                    # Ne pas afficher les valeurs num√©riques sur les barres (demande utilisateur)
                    # Filtrer les affectations sans valeur (somme des statuts = 0) et trier
                    for stc in ['Complet', 'En cours']:
                        if stc not in df_service.columns:
                            df_service[stc] = 0

                    # Retirer les affectations o√π il n'y a aucune entr√©e
                    df_service = df_service[df_service[['Complet', 'En cours']].sum(axis=1) > 0]

                    # Trier par nombre de dossiers 'En cours' d√©croissant pour montrer d'abord les chantiers les plus probl√©matiques
                    if 'En cours' in df_service.columns:
                        df_service = df_service.sort_values('En cours', ascending=False)

                    fig_bar.update_layout(xaxis_title='Affectation', uniformtext_minsize=8, uniformtext_mode='hide')
                    st.plotly_chart(fig_bar, use_container_width=True)
                except Exception as e:
                    st.error(f"Erreur affichage graphique par service: {e}")
    
    st.markdown("---")

    # Nouveaux graphiques demand√©s :
    col_doc1, col_doc2 = st.columns(2)
    with col_doc1:
        st.subheader("üìÑ Documents les plus souvent manquants")
        # Aggr√©gation des documents manquants
        docs_counter = {}
        for v in st.session_state.hr_database['Documents_manquants'].fillna(''):
            try:
                docs = json.loads(v)
            except:
                docs = []
            for d in docs:
                docs_counter[d] = docs_counter.get(d, 0) + 1

        if docs_counter:
            docs_df = pd.DataFrame(list(docs_counter.items()), columns=['Document', 'Count']).sort_values('Count', ascending=False)
            top_n = docs_df.head(10)
            fig_docs = px.bar(top_n, x='Document', y='Count', title='Top 10 des documents manquants', text='Count')
            # Nettoyer les libell√©s g√©n√©riques
            fig_docs.update_traces(texttemplate='%{text}', textposition='outside')
            fig_docs.update_layout(xaxis_title='', yaxis_title='', uniformtext_minsize=8, uniformtext_mode='hide')
            st.plotly_chart(fig_docs, use_container_width=True)

        # D√©placer le graphique 'Distribution des relances' dans la colonne de droite (col_doc2)
        with col_doc2:
            st.subheader("üìä Distribution des relances")
            try:
                counts = st.session_state.hr_database['Nombre_relances'].fillna(0).astype(int)
            except Exception:
                counts = pd.Series(dtype=int)

            c0 = int((counts == 0).sum())
            c1 = int((counts == 1).sum())
            c2 = int((counts == 2).sum())
            c3 = int((counts >= 3).sum())

            rel_df = pd.DataFrame({'Relances': ['0', '1', '2', '3+'], 'Count': [c0, c1, c2, c3]})
            fig_rel = px.bar(rel_df, x='Relances', y='Count', title='Distribution des relances (0 / 1 / 2 / 3+)', text='Count')
            fig_rel.update_traces(texttemplate='%{text}', textposition='outside')
            fig_rel.update_layout(
                xaxis={'type': 'category', 'categoryorder': 'array', 'categoryarray': ['0', '1', '2', '3+']},
                yaxis={'tickformat': '.0f', 'dtick': 1},
                xaxis_title='',
                yaxis_title='',
                uniformtext_minsize=8, uniformtext_mode='hide'
            )
            st.plotly_chart(fig_rel, use_container_width=True)

    col_filter1, col_filter2, col_filter3, col_filter4 = st.columns(4)

    with col_filter1:
        status_filter = st.selectbox("Filtrer par Statut", ["Tous", "Complet", "En cours"])

    with col_filter2:
        # Pr√©f√©rer la colonne 'Affectation' si elle existe (contient les noms des chantiers).
        if 'Affectation' in st.session_state.hr_database.columns:
            raw_services = st.session_state.hr_database['Affectation'].dropna().astype(str).unique().tolist()
        elif 'Service' in st.session_state.hr_database.columns:
            raw_services = st.session_state.hr_database['Service'].dropna().astype(str).unique().tolist()
        else:
            raw_services = []
        # Nettoyer et trier pour une UI plus propre
        raw_services = [s for s in raw_services if str(s).strip() != '']
        raw_services = sorted(raw_services)
        services = ["Tous"] + raw_services
        service_filter = st.selectbox("Filtrer par Affectation", services)

    with col_filter3:
        relance_filter = st.selectbox("Filtrer par Relances", ["Toutes", "0 relance", "1 relance", "2+ relances"])
    
    with col_filter4:
        sort_by = st.selectbox("Trier par", [
            "Nom", "Date d'int√©gration", "Nombre de documents manquants", "Derni√®re relance"
        ])
    
    # Application des filtres
    filtered_df = st.session_state.hr_database.copy()
    
    if status_filter != "Tous":
        filtered_df = filtered_df[filtered_df['Statut'] == status_filter]
    
    if service_filter != "Tous":
        # Filtrer en privil√©giant 'Affectation' si disponible
        if 'Affectation' in filtered_df.columns:
            filtered_df = filtered_df[filtered_df['Affectation'] == service_filter]
        else:
            filtered_df = filtered_df[filtered_df['Service'] == service_filter]
    
    if relance_filter != "Toutes":
        if relance_filter == "0 relance":
            filtered_df = filtered_df[filtered_df['Nombre_relances'] == 0]
        elif relance_filter == "1 relance":
            filtered_df = filtered_df[filtered_df['Nombre_relances'] == 1]
        elif relance_filter == "2+ relances":
            filtered_df = filtered_df[filtered_df['Nombre_relances'] >= 2]
    
    # Ajouter le nombre de documents manquants pour l'affichage
    filtered_df['Nb_docs_manquants'] = filtered_df['Documents_manquants'].apply(get_missing_documents_count)
    
    # Tableau principal
    st.subheader("üìã Liste des Collaborateurs")
    
    if len(filtered_df) > 0:
        # Pr√©parer les donn√©es pour l'affichage
        # Prioriser la colonne 'Affectation' si elle existe, sinon utiliser 'Service'
        if 'Affectation' in filtered_df.columns:
            filtered_df['Affectation_display'] = filtered_df['Affectation']
        else:
            # si seulement 'Service' existe, l'utiliser
            filtered_df['Affectation_display'] = filtered_df['Service'] if 'Service' in filtered_df.columns else ''

        # S'assurer que toutes les colonnes attendues existent dans le DataFrame (√©vite KeyError)
        expected_cols = ['Nom', 'Pr√©nom', 'Poste', 'Affectation_display', 'T√©l√©phone', 'Email', 'Date_integration', 'Statut', 'Nb_docs_manquants', 'Derniere_relance', 'Nombre_relances']
        for c in expected_cols:
            if c not in filtered_df.columns:
                filtered_df[c] = ''

        display_df = filtered_df[expected_cols].copy()
        
        display_df.columns = ['Nom', 'Pr√©nom', 'Poste', 'Affectation', 'T√©l√©phone', 'Email', 
                 'Date Int√©gration', 'Statut', 'Docs Manquants', 
                 'Derni√®re Relance', 'Nb Relances']
        
        # Affichage avec formatage conditionnel
        st.dataframe(
            display_df,
            use_container_width=True,
            hide_index=True
        )
        
        # D√©tails des documents manquants
        with st.expander("üìÑ D√©tail des documents manquants"):
            for idx, row in filtered_df.iterrows():
                if row['Statut'] == 'En cours':
                    try:
                        missing_docs = json.loads(row['Documents_manquants'])
                        if missing_docs:
                            st.write(f"**{row['Pr√©nom']} {row['Nom']}** ({row['Poste']}):")
                            for doc in missing_docs:
                                st.write(f"  ‚Ä¢ {doc}")
                            st.write("")
                    except:
                        pass
    else:
        st.info("Aucun collaborateur ne correspond aux filtres s√©lectionn√©s.")
    
    # Boutons d'action
    col_action1, col_action2 = st.columns(2)
    
    # Retirer le bouton de sauvegarde de l'onglet principal (inutile)
    with col_action1:
        st.write("")
    
    with col_action2:
        if st.button("üîÑ Recharger depuis Google Sheets", use_container_width=True):
            with st.spinner("Rechargement en cours..."):
                # Vider le cache pour forcer le rechargement
                st.cache_data.clear()
                try:
                    raw = _load_df_from_worksheet(WORKSHEET_NAME)
                    if raw is None:
                        st.error("‚ùå Impossible de lire la feuille Google Sheets.")
                    else:
                        st.session_state.hr_database = normalize_hr_database(raw)
                        # Signaler le succ√®s apr√®s le rerun
                        st.session_state['_last_reload_successful'] = True
                        # Forcer un rerun afin que l'UI refl√®te imm√©diatement les nouvelles donn√©es
                        # Appel direct : ne pas attraper l'exception, Streamlit g√®re le rerun
                        st.experimental_rerun()
                except Exception as e:
                    st.error(f"Erreur lors du rechargement direct: {e}")

# ============================
# ONGLET 2: GESTION COLLABORATEUR
# ============================
with tab2:
    st.header("üë§ Ajout / Mise √† jour d'un Collaborateur")
    
    # Choix: Nouveau collaborateur ou mise √† jour (label simplifi√©)
    action_type = st.radio(
        "",
        ["‚ûï Ajouter un nouveau collaborateur", "‚úèÔ∏è Mettre √† jour un collaborateur existant"],
        horizontal=True
    )
    
    if action_type == "‚ûï Ajouter un nouveau collaborateur":
        # Formulaire pour nouveau collaborateur
        with st.form("nouveau_collaborateur"):
            st.subheader("üìù Informations du nouveau collaborateur")
            
            col_info1, col_info2 = st.columns(2)
            
            with col_info1:
                nom = st.text_input("Nom *", placeholder="Ex: ALAMI")
                prenom = st.text_input("Pr√©nom *", placeholder="Ex: Ahmed")
                email = st.text_input("Email *", placeholder="Ex: ahmed.alami@tgcc.ma")
            
            with col_info2:
                poste = st.text_input("Poste *", placeholder="Ex: Ing√©nieur IT")
                affectation = st.text_input("Affectation *", placeholder="Ex: Service IT")
                telephone = st.text_input("T√©l√©phone", placeholder="Ex: +212600000000")
                date_integration = st.date_input("Date d'int√©gration")
            
            st.subheader("üìã Documents RH - Cochez les documents FOURNIS")
            st.info("‚ÑπÔ∏è Cochez uniquement les documents que le collaborateur a D√âJ√Ä fournis")
            
            # Checklist des documents en deux colonnes
            provided_docs = []
            cols_docs = st.columns(2)
            for i, doc in enumerate(DOCUMENTS_RH):
                col = cols_docs[i % 2]
                with col:
                    if st.checkbox(f"{doc}", key=f"new_{i}"):
                        provided_docs.append(doc)
            
            # Calculer les documents manquants (ceux non coch√©s)
            missing_docs = [doc for doc in DOCUMENTS_RH if doc not in provided_docs]
            
            # Bouton de soumission
            submitted = st.form_submit_button("‚ûï Ajouter le collaborateur", type="primary", use_container_width=True)
            
            if submitted:
                if nom and prenom and email and poste and affectation:
                    # D√©terminer le statut
                    statut = "Complet" if len(missing_docs) == 0 else "En cours"
                    
                    # Timestamps
                    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    
                    # Cr√©er la nouvelle entr√©e
                    nouvelle_ligne = pd.DataFrame({
                        'Nom': [nom.upper()],
                        'Pr√©nom': [prenom.title()],
                        'Poste': [poste],
                        'Service': [affectation],
                        'T√©l√©phone': [telephone],
                        'Email': [email.lower()],
                        'Date_integration': [str(date_integration)],
                        'Documents_manquants': [json.dumps(missing_docs)],
                        'Statut': [statut],
                        'Derniere_relance': [''],
                        'Nombre_relances': [0],
                        'Date_creation': [now],
                        'Date_modification': [now]
                    })
                    
                    # Ajouter √† la base de donn√©es locale
                    st.session_state.hr_database = pd.concat([st.session_state.hr_database, nouvelle_ligne], ignore_index=True)
                    
                    # Ajouter directement √† Google Sheets
                    new_row_data = [
                        nom.upper(), prenom.title(), poste, affectation, telephone, email.lower(),
                        str(date_integration), json.dumps(missing_docs), statut,
                        '', 0, now, now
                    ]
                    
                    with st.spinner("Ajout √† Google Sheets..."):
                        if add_row_to_gsheet(new_row_data):
                            st.success(f"‚úÖ {prenom} {nom} ajout√©(e) dans Google Sheets!")
                            # Vider le cache pour forcer le rechargement
                            st.cache_data.clear()
                        else:
                            st.warning("‚ö†Ô∏è Ajout√© localement, mais erreur Google Sheets. Utilisez 'Sauvegarder' manuellement.")
                    
                    st.success(f"üìä Statut: **{statut}** ({len(missing_docs)} documents manquants)")
                    
                    if len(missing_docs) > 0:
                        st.info("üìÑ Documents manquants:")
                        for doc in missing_docs:
                            st.write(f"  ‚Ä¢ {doc}")
                    
                        # previously: st.rerun() ‚Äî removed to avoid automatic tab switching
                else:
                    st.error("‚ùå Veuillez remplir tous les champs obligatoires (*)")
    
    else:
        # Mise √† jour d'un collaborateur existant
        st.subheader("‚úèÔ∏è Mise √† jour d'un collaborateur")
        
        if len(st.session_state.hr_database) > 0:
            # S√©lection du collaborateur
            collaborateurs = st.session_state.hr_database.apply(lambda x: f"{x['Pr√©nom']} {x['Nom']} ({x['Poste']})", axis=1).tolist()
            selected_collab = st.selectbox("Choisir le collaborateur √† mettre √† jour:", collaborateurs)
            
            if selected_collab:
                # Trouver l'index du collaborateur s√©lectionn√©
                selected_idx = collaborateurs.index(selected_collab)
                collab_data = st.session_state.hr_database.iloc[selected_idx]
                
                # Afficher le statut actuel, et si complet ajouter le message de dossier complet sur la m√™me ligne
                if collab_data['Statut'] == 'Complet':
                    st.info(f"üìä Statut actuel: **{collab_data['Statut']}** ‚Äî ‚úÖ Dossier complet - Aucun document manquant!")
                else:
                    st.info(f"üìä Statut actuel: **{collab_data['Statut']}**")
                
                # Afficher les documents actuellement manquants
                try:
                    current_missing = json.loads(collab_data['Documents_manquants'])
                except:
                    current_missing = []
                
                if current_missing:
                    st.warning(f"üìÑ Documents actuellement manquants ({len(current_missing)}):")
                    for doc in current_missing:
                        st.write(f"  ‚Ä¢ {doc}")
                else:
                    st.success("‚úÖ Dossier complet - Aucun document manquant!")
                
                # Formulaire de mise √† jour
                with st.form("mise_a_jour"):
                    st.subheader("üìã Mise √† jour des documents fournis")
                    st.info("‚ÑπÔ∏è Cochez les documents qui ont √©t√© FOURNIS")

                    # T√©l√©phone retir√© de la mise √† jour des documents (conforme √† la demande)

                    # Checklist avec √©tat actuel (inverse de la logique pr√©c√©dente) en deux colonnes
                    provided_docs = []
                    cols_docs_update = st.columns(2)
                    for i, doc in enumerate(DOCUMENTS_RH):
                        is_currently_provided = doc not in current_missing  # Inverse de la logique
                        col = cols_docs_update[i % 2]
                        with col:
                            if st.checkbox(f"{doc}", value=is_currently_provided, key=f"update_{i}"):
                                provided_docs.append(doc)
                    
                    # Calculer les documents manquants (ceux non coch√©s)
                    new_missing_docs = [doc for doc in DOCUMENTS_RH if doc not in provided_docs]
                    
                    # Bouton de mise √† jour
                    update_submitted = st.form_submit_button("üîÑ Mettre √† jour", type="primary", use_container_width=True)
                    
                    if update_submitted:
                        # D√©terminer le nouveau statut
                        nouveau_statut = "Complet" if len(new_missing_docs) == 0 else "En cours"
                        
                        # Timestamp de modification
                        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        
                        # Mettre √† jour la base de donn√©es locale
                        st.session_state.hr_database.loc[selected_idx, 'Documents_manquants'] = json.dumps(new_missing_docs)
                        st.session_state.hr_database.loc[selected_idx, 'Statut'] = nouveau_statut
                        st.session_state.hr_database.loc[selected_idx, 'Date_modification'] = now
                        
                        # Mettre √† jour Google Sheets
                        updated_row = st.session_state.hr_database.iloc[selected_idx].fillna('').tolist()
                        
                        with st.spinner("Mise √† jour dans Google Sheets..."):
                            if update_row_in_gsheet(selected_idx, updated_row):
                                st.success("‚úÖ Mis √† jour dans Google Sheets!")
                                # Vider le cache pour forcer le rechargement
                                st.cache_data.clear()
                            else:
                                st.warning("‚ö†Ô∏è Mis √† jour localement, mais erreur Google Sheets. Utilisez 'Sauvegarder' manuellement.")
                        
                        # Afficher le r√©sultat
                        if nouveau_statut == "Complet":
                            st.success(f"üéâ F√©licitations! Le dossier de {collab_data['Pr√©nom']} {collab_data['Nom']} est maintenant COMPLET!")
                        else:
                            st.info(f"üìä Dossier mis √† jour. Statut: **{nouveau_statut}** ({len(new_missing_docs)} documents encore manquants)")
                            if new_missing_docs:
                                st.write("üìÑ Documents encore manquants:")
                                for doc in new_missing_docs:
                                    st.write(f"  ‚Ä¢ {doc}")
                        
                        # pas de rerun ici pour √©viter de changer d'onglet
        else:
            st.info("üì≠ Aucun collaborateur dans la base de donn√©es. Ajoutez d'abord un collaborateur.")

# ============================
# ONGLET 3: RELANCES AUTOMATIQUES
# ============================
with tab3:
    st.header("üìß Syst√®me de Relances Automatiques")
    
    # Configuration SMTP
    
    # S√©lection des collaborateurs √† relancer
    st.subheader("üë• Collaborateurs avec documents manquants")
    
    # Filtrer les collaborateurs avec des documents manquants
    incomplete_collabs = st.session_state.hr_database[st.session_state.hr_database['Statut'] == 'En cours'].copy()
    
    if len(incomplete_collabs) > 0:
        # Tableau des collaborateurs √† relancer
        display_incomplete = incomplete_collabs[['Nom', 'Pr√©nom', 'Poste', 'Email', 'Date_integration', 'Derniere_relance', 'Nombre_relances']].copy()
        display_incomplete['Nb_docs_manquants'] = incomplete_collabs['Documents_manquants'].apply(get_missing_documents_count)
        
        display_incomplete.columns = ['Nom', 'Pr√©nom', 'Poste', 'Email', 'Date Int√©gration', 'Derni√®re Relance', 'Nb Relances', 'Docs Manquants']
        
        st.dataframe(display_incomplete, use_container_width=True, hide_index=True)
        
        # Formulaire de relance
        st.subheader("üì® Envoyer une relance")
        
        # S√©lection du collaborateur (en dehors du formulaire pour actualisation dynamique)
        collab_options = incomplete_collabs.apply(lambda x: f"{x['Pr√©nom']} {x['Nom']} ({x['Email']})", axis=1).tolist()
        selected_collab_relance = st.selectbox("Choisir le collaborateur:", collab_options, key="collab_selectbox")
        
        if selected_collab_relance:
            # Trouver les donn√©es du collaborateur s√©lectionn√©
            selected_idx_relance = collab_options.index(selected_collab_relance)
            collab_relance_data = incomplete_collabs.iloc[selected_idx_relance]
            
            # Afficher les documents manquants
            try:
                missing_docs_relance = json.loads(collab_relance_data['Documents_manquants'])
            except:
                missing_docs_relance = []
            
            # Section expandable pour les documents manquants
            with st.expander(f"üìÑ Documents manquants pour {collab_relance_data['Pr√©nom']} {collab_relance_data['Nom']} ({len(missing_docs_relance)} documents)", expanded=True):
                for doc in missing_docs_relance:
                    st.write(f"‚Ä¢ {doc}")
            
            # Calculer les dates selon le type de relance
            delay_date_now = (datetime.now() + timedelta(days=14)).strftime('%d/%m/%Y')
            send_date_1week = (datetime.now() + timedelta(days=7))
            delay_date_1week = (send_date_1week + timedelta(days=14)).strftime('%d/%m/%Y')
            send_date_2weeks = (datetime.now() + timedelta(days=14))
            delay_date_2weeks = (send_date_2weeks + timedelta(days=14)).strftime('%d/%m/%Y')
            
            # Section: informations de l'√©metteur (Email et CC sur la m√™me ligne)
            col_actor, col_cc = st.columns([1,1])
            with col_actor:
                actor_email = st.text_input("Email de l'√©metteur (optionnel, utilis√© en Reply-To)", value=st.session_state.get('actor_email', ''))
            with col_cc:
                cc_emails = st.text_input("CC (emails s√©par√©s par des virgules, optionnel)", value=st.session_state.get('cc_emails', ''))

            st.markdown("---")

            # Section template email avec possibilit√© d'√©dition
            with st.expander("üìß √âditer le mod√®le d'email", expanded=False):
                docs_list_preview = '\n'.join([f"‚Ä¢ {doc}" for doc in missing_docs_relance])
                
                default_email_body = f"""Bonjour {collab_relance_data['Pr√©nom']},

Merci de noter que votre dossier administratif RH demeure incomplet √† ce jour.
Merci de remettre les √©l√©ments suivants afin de le compl√©ter:

{docs_list_preview}

Les documents doivent √™tre envoy√©s via le pointeur chantier dans une enveloppe ferm√©e, en mentionnant CONFIDENTIEL et A L'ATTENTION DE M.L'EQUIPE RECRUTEMENT.

Merci de noter que le dernier d√©lai pour compl√©ter votre dossier c'est le {delay_date_now}

Comptant sur votre pr√©cieuse collaboration.

Cordialement"""
                
                # Zone de texte √©ditable pour le corps du message
                custom_email_body = st.text_area(
                    "Corps du message (modifiable):",
                    value=default_email_body,
                    height=300,
                    key=f"email_body_{selected_idx_relance}"
                )
                
                st.info("üí° Vous pouvez modifier le texte ci-dessus. La date limite sera automatiquement mise √† jour selon le type de relance choisi.")

            with st.form("relance_form"):
                
                # Options de relance
                st.subheader("‚è∞ Type de relance")
                relance_type = st.radio(
                    "",
                    ["üìß Envoyer maintenant", "‚è∞ Programmer dans 1 semaine", "‚è∞ Programmer dans 2 semaines"],
                    horizontal=True
                )
                
                # Choix d'heure pour la relance programm√©e (par d√©faut 09:00)
                send_time = st.time_input("Heure d'envoi (pour relances programm√©es)", value=datetime.strptime("09:00", "%H:%M").time())

                # Affichage compact des informations selon le type de relance
                if relance_type == "üìß Envoyer maintenant":
                    st.write(f"Date limite dans l'email: {delay_date_now}")
                    final_delay_date = delay_date_now
                elif relance_type == "‚è∞ Programmer dans 1 semaine":
                    st.write(f"Relance programm√©e: {send_date_1week.strftime('%d/%m/%Y')} ‚Äî Date limite: {delay_date_1week} √† {send_time.strftime('%H:%M')}")
                    final_delay_date = delay_date_1week
                else:  # 2 semaines
                    st.write(f"Relance programm√©e: {send_date_2weeks.strftime('%d/%m/%Y')} ‚Äî Date limite: {delay_date_2weeks} √† {send_time.strftime('%H:%M')}")
                    final_delay_date = delay_date_2weeks
                
                # Bouton d'envoi
                send_button = st.form_submit_button("üìß Envoyer/Programmer la relance", type="primary", use_container_width=True)
                
                if send_button:
                    with st.spinner("üì§ Traitement de la relance en cours..."):
                        if relance_type == "üìß Envoyer maintenant":
                            # Envoi imm√©diat
                            # Utiliser le corps d'email personnalis√© avec la date limite mise √† jour
                            final_email_body = custom_email_body.replace(delay_date_now, final_delay_date)
                            
                            success = send_email_reminder(
                                collab_relance_data['Email'],
                                collab_relance_data['Pr√©nom'],
                                missing_docs_relance,
                                final_delay_date,
                                final_email_body,
                                actor_email=actor_email,
                                cc_emails=cc_emails
                            )
                            
                            if success:
                                # Mettre √† jour les donn√©es de relance
                                original_idx = st.session_state.hr_database[
                                    (st.session_state.hr_database['Nom'] == collab_relance_data['Nom']) &
                                    (st.session_state.hr_database['Pr√©nom'] == collab_relance_data['Pr√©nom'])
                                ].index[0]
                                
                                st.session_state.hr_database.loc[original_idx, 'Derniere_relance'] = datetime.now().strftime('%Y-%m-%d')
                                st.session_state.hr_database.loc[original_idx, 'Nombre_relances'] += 1
                                
                                # Ajouter √† l'historique
                                nouvelle_relance = pd.DataFrame({
                                    'Date': [datetime.now().strftime('%Y-%m-%d %H:%M')],
                                    'Collaborateur': [f"{collab_relance_data['Pr√©nom']} {collab_relance_data['Nom']}"],
                                    'Email': [collab_relance_data['Email']],
                                    'Documents_relances': [json.dumps(missing_docs_relance)],
                                    'Statut_envoi': ['Envoy√© imm√©diatement'],
                                    'Email_body': [final_email_body]
                                })
                                
                                st.session_state.relance_history = pd.concat([st.session_state.relance_history, nouvelle_relance], ignore_index=True)
                                # Persister historique dans Google Sheets
                                try:
                                    save_relance_history_to_gsheet(st.session_state.relance_history)
                                except Exception:
                                    pass

                                st.success(f"‚úÖ Email envoy√© avec succ√®s √† {collab_relance_data['Pr√©nom']} {collab_relance_data['Nom']}!")
                                # Ne pas forcer le rerun pour √©viter changement d'onglet
                            else:
                                st.error("‚ùå Erreur lors de l'envoi de l'email via l'API Gmail.")
                        else:
                            # Relance programm√©e
                            # Construire la date programm√©e avec l'heure choisie
                            if relance_type == "‚è∞ Programmer dans 1 semaine":
                                base_dt = datetime.now() + timedelta(days=7)
                            else:
                                base_dt = datetime.now() + timedelta(days=14)
                            # Remplacer l'heure par celle choisie
                            date_programmee_dt = base_dt.replace(hour=send_time.hour, minute=send_time.minute, second=0, microsecond=0)
                            date_programmee = date_programmee_dt.strftime('%Y-%m-%d %H:%M')
                            
                            # Construire le corps final (avec date mise √† jour) et l'enregistrer
                            scheduled_body = custom_email_body.replace(delay_date_now, final_delay_date)
                            relance_programmee = pd.DataFrame({
                                'Date_programmee': [date_programmee],
                                'Collaborateur': [f"{collab_relance_data['Pr√©nom']} {collab_relance_data['Nom']}"],
                                'Email': [collab_relance_data['Email']],
                                'Documents_relances': [json.dumps(missing_docs_relance)],
                                'Date_limite': [final_delay_date],
                                'Statut': ['Programm√©e'],
                                'Actor_email': [actor_email],
                                'CC': [cc_emails],
                                'Email_body': [scheduled_body]
                            })
                            
                            st.session_state.scheduled_relances = pd.concat([st.session_state.scheduled_relances, relance_programmee], ignore_index=True)
                            # Persister relances programm√©es
                            try:
                                save_scheduled_relances_to_gsheet(st.session_state.scheduled_relances)
                            except Exception:
                                pass

                            st.success(f"‚úÖ Relance programm√©e pour le {date_programmee} pour {collab_relance_data['Pr√©nom']} {collab_relance_data['Nom']}!")
    
    else:
        st.success("üéâ Aucune relance n√©cessaire! Tous les dossiers sont complets.")
    
    # Historique des relances
    st.markdown("---")
    st.subheader("üìà Historique et Programmation des Relances")
    
    # Onglets pour s√©parer l'historique et les relances programm√©es
    hist_tab1, hist_tab2 = st.tabs(["üìß Relances Envoy√©es", "‚è∞ Relances Programm√©es"])
    
    with hist_tab1:
        if len(st.session_state.relance_history) > 0:
            # Affichage de l'historique
            history_display = st.session_state.relance_history.copy()
            history_display = history_display.sort_values('Date', ascending=False)
            # Pretty-print Documents_relances JSON -> 'doc1, doc2'
            if 'Documents_relances' in history_display.columns:
                def _pretty_docs(x):
                    try:
                        arr = json.loads(x) if isinstance(x, str) and x.strip()!='' else []
                        return ', '.join(arr)
                    except Exception:
                        return str(x)
                history_display['Documents_relances'] = history_display['Documents_relances'].apply(_pretty_docs)
            st.dataframe(history_display, use_container_width=True, hide_index=True)
            
            # Statistiques des relances
            col_stat1, col_stat2, col_stat3 = st.columns(3)
            
            with col_stat1:
                total_relances = len(st.session_state.relance_history)
                st.metric("üìß Total Relances", total_relances)
            
            with col_stat2:
                relances_today = len(st.session_state.relance_history[
                    st.session_state.relance_history['Date'].str.startswith(datetime.now().strftime('%Y-%m-%d'))
                ])
                st.metric("üìÖ Relances Aujourd'hui", relances_today)
            
            with col_stat3:
                avg_relances = st.session_state.hr_database[st.session_state.hr_database['Nombre_relances'] > 0]['Nombre_relances'].mean()
                if pd.notna(avg_relances):
                    # afficher sans d√©cimales inutiles (ex: 0.5 -> 1 si on veut entier, ou 0.5 affich√© proprement)
                    # on affiche 1 d√©cimale mais s'il s'agit d'un .0 on affiche sans d√©cimale
                    if float(avg_relances).is_integer():
                        st.metric("üìä Moyenne Relances/Collab", f"{int(avg_relances)}")
                    else:
                        st.metric("üìä Moyenne Relances/Collab", f"{avg_relances:.1f}")
                else:
                    st.metric("üìä Moyenne Relances/Collab", "0")
        
        else:
            st.info("üì≠ Aucune relance envoy√©e pour le moment.")
    
    with hist_tab2:
        if len(st.session_state.scheduled_relances) > 0:
            # Affichage des relances programm√©es
            scheduled_display = st.session_state.scheduled_relances.copy()
            scheduled_display = scheduled_display.sort_values('Date_programmee', ascending=True)
            # Pretty-print Documents_relances
            if 'Documents_relances' in scheduled_display.columns:
                def _pretty_docs_sched(x):
                    try:
                        arr = json.loads(x) if isinstance(x, str) and x.strip()!='' else []
                        return ', '.join(arr)
                    except Exception:
                        return str(x)
                scheduled_display['Documents_relances'] = scheduled_display['Documents_relances'].apply(_pretty_docs_sched)
            st.dataframe(scheduled_display, use_container_width=True, hide_index=True)

            st.markdown("---")
            st.subheader("G√©rer les relances programm√©es")
            # Permettre la suppression d'une relance programm√©e individuelle
            options = scheduled_display.apply(lambda r: f"{r['Date_programmee']} ‚Äî {r['Collaborateur']} ‚Äî {r.get('Email','')}", axis=1).tolist()
            to_delete = st.selectbox("S√©lectionnez une relance programm√©e √† supprimer:", options)
            if st.button("üóëÔ∏è Supprimer la relance s√©lectionn√©e"):
                try:
                    idx = options.index(to_delete)
                    # Retirer de la session_state et persister
                    st.session_state.scheduled_relances = st.session_state.scheduled_relances.drop(st.session_state.scheduled_relances.index[idx]).reset_index(drop=True)
                    try:
                        save_scheduled_relances_to_gsheet(st.session_state.scheduled_relances)
                    except Exception:
                        pass
                    st.success("‚úÖ Relance programm√©e supprim√©e.")
                except Exception as e:
                    st.error(f"Erreur suppression: {e}")
        else:
            st.info("üìÖ Aucune relance programm√©e pour le moment.")

# Footer
st.markdown("---")
st.markdown("**üíº Syst√®me de Suivi des Dossiers RH - TGCC** | Version 1.0")

# (Outils admin supprim√©s par demande de l'utilisateur)
