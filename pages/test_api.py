import streamlit as st
import pandas as pd
import io
import json 
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
import os

# Configuration de la page
st.set_page_config(
    page_title="Suivi des Dossiers RH - TGCC",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #1e88e5;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    .complete-status {
        background-color: #d4edda;
        color: #155724;
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
    }
    .incomplete-status {
        background-color: #f8d7da;
        color: #721c24;
        padding: 5px 10px;
        border-radius: 5px;
        font-weight: bold;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
    .stTabs [data-baseweb="tab"] {
        background-color: white;
        border-radius: 4px;
        padding: 10px 16px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    .stTabs [data-baseweb="tab"][aria-selected="true"] {
        background-color: #e3f2fd;
        border-bottom: 2px solid #1e88e5;
    }
</style>
""", unsafe_allow_html=True)

# D√©finition des documents RH standard
DOCUMENTS_RH = [
    "Copie CIN",
    "Attestation de travail pr√©c√©dente", 
    "Dipl√¥me/Certificat de formation",
    "RIB (Relev√© d'Identit√© Bancaire)",
    "Certificat m√©dical d'aptitude",
    "Photo d'identit√©",
    "Contrat de travail sign√©",
    "Attestation de s√©curit√© sociale",
    "Certificat de r√©sidence",
    "R√©f√©rences professionnelles"
]

# Initialisation des donn√©es en session
if 'hr_database' not in st.session_state:
    # Base de donn√©es initiale avec quelques exemples
    st.session_state.hr_database = pd.DataFrame({
        'Nom': ['ALAMI', 'BENALI', 'CHERKAOUI'],
        'Pr√©nom': ['Ahmed', 'Fatima', 'Mohamed'],
        'Poste': ['Ing√©nieur IT', 'Comptable', 'Technicien'],
        'Service': ['IT', 'Finance', 'Production'],
        'Email': ['ahmed.alami@tgcc.ma', 'fatima.benali@tgcc.ma', 'mohamed.cherkaoui@tgcc.ma'],
        'Date_integration': ['2024-01-15', '2024-02-01', '2024-01-30'],
        'Documents_manquants': [
            json.dumps(['Certificat m√©dical d\'aptitude', 'Photo d\'identit√©']),
            json.dumps(['RIB (Relev√© d\'Identit√© Bancaire)']),
            json.dumps([])
        ],
        'Statut': ['En cours', 'En cours', 'Complet'],
        'Derniere_relance': ['2024-01-20', '2024-02-05', ''],
        'Nombre_relances': [1, 2, 0]
    })

if 'relance_history' not in st.session_state:
    st.session_state.relance_history = pd.DataFrame(columns=[
        'Date', 'Collaborateur', 'Email', 'Documents_relances', 'Statut_envoi'
    ])

# Fonctions utilitaires
def save_data():
    """Sauvegarde les donn√©es dans un fichier CSV"""
    try:
        st.session_state.hr_database.to_csv('hr_dossiers.csv', index=False)
        return True
    except Exception as e:
        st.error(f"Erreur lors de la sauvegarde: {e}")
        return False

def load_data():
    """Charge les donn√©es depuis un fichier CSV si il existe"""
    try:
        if Path('hr_dossiers.csv').exists():
            st.session_state.hr_database = pd.read_csv('hr_dossiers.csv')
            return True
    except Exception as e:
        st.error(f"Erreur lors du chargement: {e}")
    return False

def calculate_completion_percentage():
    """Calcule le pourcentage de dossiers complets"""
    if len(st.session_state.hr_database) == 0:
        return 0
    complete_count = len(st.session_state.hr_database[st.session_state.hr_database['Statut'] == 'Complet'])
    return (complete_count / len(st.session_state.hr_database)) * 100

def get_missing_documents_count(documents_json):
    """Compte le nombre de documents manquants"""
    try:
        docs = json.loads(documents_json)
        return len(docs)
    except:
        return 0

def send_email_reminder(recipient_email, recipient_name, missing_docs, sender_email, sender_password):
    """Envoie un email de relance"""
    try:
        # Configuration SMTP Gmail
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        
        # Cr√©er le message
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = recipient_email
        msg['Subject'] = f"Rappel - Documents manquants pour votre dossier RH"
        
        # Corps du message
        body = f"""
Bonjour {recipient_name},

J'esp√®re que vous allez bien.

Je me permets de vous rappeler qu'il manque encore quelques documents pour compl√©ter votre dossier RH :

{chr(10).join([f"‚Ä¢ {doc}" for doc in missing_docs])}

Merci de bien vouloir nous transmettre ces documents dans les plus brefs d√©lais pour finaliser votre int√©gration.

Si vous avez des questions, n'h√©sitez pas √† me contacter.

Cordialement,
Service RH - TGCC
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        # Envoyer l'email
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, sender_password)
        text = msg.as_string()
        server.sendmail(sender_email, recipient_email, text)
        server.quit()
        
        return True
    except Exception as e:
        st.error(f"Erreur lors de l'envoi de l'email: {e}")
        return False

# Titre principal
st.markdown('<h1 class="main-header">üìã Suivi des Dossiers RH</h1>', unsafe_allow_html=True)
st.markdown("---")

# Cr√©er les onglets
tab1, tab2, tab3 = st.tabs([
    "üìä Suivi Global",
    "üë§ Gestion Collaborateur", 
    "üìß Relances Automatiques"
])

# ============================
# ONGLET 1: SUIVI GLOBAL
# ============================
with tab1:
    st.header("üìä Vue d'ensemble des dossiers RH")
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_collaborateurs = len(st.session_state.hr_database)
        st.metric("üë• Total Collaborateurs", total_collaborateurs)
    
    with col2:
        complete_count = len(st.session_state.hr_database[st.session_state.hr_database['Statut'] == 'Complet'])
        st.metric("‚úÖ Dossiers Complets", complete_count)
    
    with col3:
        incomplete_count = total_collaborateurs - complete_count
        st.metric("‚è≥ Dossiers En Cours", incomplete_count)
    
    with col4:
        completion_rate = calculate_completion_percentage()
        st.metric("üìà Taux de Compl√©tude", f"{completion_rate:.1f}%")
    
    # Barre de progression globale
    st.subheader("üéØ Progression Globale")
    progress_bar = st.progress(completion_rate / 100)
    st.write(f"**{completion_rate:.1f}%** des dossiers sont complets")
    
    # Graphiques
    col_chart1, col_chart2 = st.columns(2)
    
    with col_chart1:
        # Graphique en secteurs - R√©partition des statuts
        status_counts = st.session_state.hr_database['Statut'].value_counts()
        fig_pie = px.pie(
            values=status_counts.values, 
            names=status_counts.index,
            title="R√©partition des Statuts",
            color_discrete_map={'Complet': '#28a745', 'En cours': '#ffc107'}
        )
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col_chart2:
        # Graphique en barres - Par service
        service_stats = st.session_state.hr_database.groupby(['Service', 'Statut']).size().unstack(fill_value=0)
        fig_bar = px.bar(
            service_stats.reset_index(), 
            x='Service', 
            y=['Complet', 'En cours'] if 'En cours' in service_stats.columns else ['Complet'],
            title="Statuts par Service",
            color_discrete_map={'Complet': '#28a745', 'En cours': '#ffc107'}
        )
        st.plotly_chart(fig_bar, use_container_width=True)
    
    st.markdown("---")
    
    # Filtres
    st.subheader("üîç Filtres")
    col_filter1, col_filter2, col_filter3 = st.columns(3)
    
    with col_filter1:
        status_filter = st.selectbox("Filtrer par Statut", ["Tous", "Complet", "En cours"])
    
    with col_filter2:
        services = ["Tous"] + list(st.session_state.hr_database['Service'].unique())
        service_filter = st.selectbox("Filtrer par Service", services)
    
    with col_filter3:
        sort_by = st.selectbox("Trier par", [
            "Nom", "Date d'int√©gration", "Nombre de documents manquants", "Derni√®re relance"
        ])
    
    # Application des filtres
    filtered_df = st.session_state.hr_database.copy()
    
    if status_filter != "Tous":
        filtered_df = filtered_df[filtered_df['Statut'] == status_filter]
    
    if service_filter != "Tous":
        filtered_df = filtered_df[filtered_df['Service'] == service_filter]
    
    # Ajouter le nombre de documents manquants pour l'affichage
    filtered_df['Nb_docs_manquants'] = filtered_df['Documents_manquants'].apply(get_missing_documents_count)
    
    # Tableau principal
    st.subheader("üìã Liste des Collaborateurs")
    
    if len(filtered_df) > 0:
        # Pr√©parer les donn√©es pour l'affichage
        display_df = filtered_df[['Nom', 'Pr√©nom', 'Poste', 'Service', 'Email', 
                                 'Date_integration', 'Statut', 'Nb_docs_manquants', 
                                 'Derniere_relance', 'Nombre_relances']].copy()
        
        display_df.columns = ['Nom', 'Pr√©nom', 'Poste', 'Service', 'Email', 
                             'Date Int√©gration', 'Statut', 'Docs Manquants', 
                             'Derni√®re Relance', 'Nb Relances']
        
        # Affichage avec formatage conditionnel
        st.dataframe(
            display_df,
            use_container_width=True,
            hide_index=True
        )
        
        # D√©tails des documents manquants
        with st.expander("üìÑ D√©tail des documents manquants"):
            for idx, row in filtered_df.iterrows():
                if row['Statut'] == 'En cours':
                    try:
                        missing_docs = json.loads(row['Documents_manquants'])
                        if missing_docs:
                            st.write(f"**{row['Pr√©nom']} {row['Nom']}** ({row['Poste']}):")
                            for doc in missing_docs:
                                st.write(f"  ‚Ä¢ {doc}")
                            st.write("")
                    except:
                        pass
    else:
        st.info("Aucun collaborateur ne correspond aux filtres s√©lectionn√©s.")
    
    # Boutons d'action
    col_action1, col_action2 = st.columns(2)
    
    with col_action1:
        if st.button("üíæ Sauvegarder les donn√©es", use_container_width=True):
            if save_data():
                st.success("‚úÖ Donn√©es sauvegard√©es avec succ√®s!")
    
    with col_action2:
        if st.button("üìÅ Charger les donn√©es", use_container_width=True):
            if load_data():
                st.success("‚úÖ Donn√©es charg√©es avec succ√®s!")
                st.rerun()

# ============================
# ONGLET 2: GESTION COLLABORATEUR
# ============================
with tab2:
    st.header("üë§ Ajout / Mise √† jour d'un Collaborateur")
    
    # Choix: Nouveau collaborateur ou mise √† jour
    action_type = st.radio(
        "Que souhaitez-vous faire ?",
        ["‚ûï Ajouter un nouveau collaborateur", "‚úèÔ∏è Mettre √† jour un collaborateur existant"],
        horizontal=True
    )
    
    if action_type == "‚ûï Ajouter un nouveau collaborateur":
        # Formulaire pour nouveau collaborateur
        with st.form("nouveau_collaborateur"):
            st.subheader("üìù Informations du nouveau collaborateur")
            
            col_info1, col_info2 = st.columns(2)
            
            with col_info1:
                nom = st.text_input("Nom *", placeholder="Ex: ALAMI")
                prenom = st.text_input("Pr√©nom *", placeholder="Ex: Ahmed")
                email = st.text_input("Email *", placeholder="Ex: ahmed.alami@tgcc.ma")
            
            with col_info2:
                poste = st.text_input("Poste *", placeholder="Ex: Ing√©nieur IT")
                service = st.selectbox("Service *", ["IT", "Finance", "Production", "RH", "Marketing", "Ventes", "Autre"])
                date_integration = st.date_input("Date d'int√©gration pr√©vue")
            
            st.subheader("üìã Documents RH - Cochez les documents MANQUANTS")
            st.info("‚ÑπÔ∏è Cochez uniquement les documents que le collaborateur n'a PAS encore fournis")
            
            # Checklist des documents
            missing_docs = []
            for i, doc in enumerate(DOCUMENTS_RH):
                if st.checkbox(f"‚ùå {doc}", key=f"new_{i}"):
                    missing_docs.append(doc)
            
            # Bouton de soumission
            submitted = st.form_submit_button("‚ûï Ajouter le collaborateur", type="primary", use_container_width=True)
            
            if submitted:
                if nom and prenom and email and poste and service:
                    # D√©terminer le statut
                    statut = "Complet" if len(missing_docs) == 0 else "En cours"
                    
                    # Cr√©er la nouvelle entr√©e
                    nouvelle_ligne = pd.DataFrame({
                        'Nom': [nom.upper()],
                        'Pr√©nom': [prenom.title()],
                        'Poste': [poste],
                        'Service': [service],
                        'Email': [email.lower()],
                        'Date_integration': [str(date_integration)],
                        'Documents_manquants': [json.dumps(missing_docs)],
                        'Statut': [statut],
                        'Derniere_relance': [''],
                        'Nombre_relances': [0]
                    })
                    
                    # Ajouter √† la base de donn√©es
                    st.session_state.hr_database = pd.concat([st.session_state.hr_database, nouvelle_ligne], ignore_index=True)
                    
                    st.success(f"‚úÖ {prenom} {nom} a √©t√© ajout√©(e) avec succ√®s!")
                    st.success(f"üìä Statut: **{statut}** ({len(missing_docs)} documents manquants)")
                    
                    if len(missing_docs) > 0:
                        st.info("üìÑ Documents manquants:")
                        for doc in missing_docs:
                            st.write(f"  ‚Ä¢ {doc}")
                    
                    st.rerun()
                else:
                    st.error("‚ùå Veuillez remplir tous les champs obligatoires (*)")
    
    else:
        # Mise √† jour d'un collaborateur existant
        st.subheader("‚úèÔ∏è Mise √† jour d'un collaborateur")
        
        if len(st.session_state.hr_database) > 0:
            # S√©lection du collaborateur
            collaborateurs = st.session_state.hr_database.apply(lambda x: f"{x['Pr√©nom']} {x['Nom']} ({x['Poste']})", axis=1).tolist()
            selected_collab = st.selectbox("Choisir le collaborateur √† mettre √† jour:", collaborateurs)
            
            if selected_collab:
                # Trouver l'index du collaborateur s√©lectionn√©
                selected_idx = collaborateurs.index(selected_collab)
                collab_data = st.session_state.hr_database.iloc[selected_idx]
                
                st.info(f"üìä Statut actuel: **{collab_data['Statut']}**")
                
                # Afficher les documents actuellement manquants
                try:
                    current_missing = json.loads(collab_data['Documents_manquants'])
                except:
                    current_missing = []
                
                if current_missing:
                    st.warning(f"üìÑ Documents actuellement manquants ({len(current_missing)}):")
                    for doc in current_missing:
                        st.write(f"  ‚Ä¢ {doc}")
                else:
                    st.success("‚úÖ Dossier complet - Aucun document manquant!")
                
                # Formulaire de mise √† jour
                with st.form("mise_a_jour"):
                    st.subheader("üìã Mise √† jour des documents manquants")
                    st.info("‚ÑπÔ∏è Cochez les documents qui sont ENCORE manquants")
                    
                    # Checklist avec √©tat actuel
                    new_missing_docs = []
                    for i, doc in enumerate(DOCUMENTS_RH):
                        is_currently_missing = doc in current_missing
                        if st.checkbox(f"‚ùå {doc}", value=is_currently_missing, key=f"update_{i}"):
                            new_missing_docs.append(doc)
                    
                    # Bouton de mise √† jour
                    update_submitted = st.form_submit_button("üîÑ Mettre √† jour", type="primary", use_container_width=True)
                    
                    if update_submitted:
                        # D√©terminer le nouveau statut
                        nouveau_statut = "Complet" if len(new_missing_docs) == 0 else "En cours"
                        
                        # Mettre √† jour la base de donn√©es
                        st.session_state.hr_database.loc[selected_idx, 'Documents_manquants'] = json.dumps(new_missing_docs)
                        st.session_state.hr_database.loc[selected_idx, 'Statut'] = nouveau_statut
                        
                        # Afficher le r√©sultat
                        if nouveau_statut == "Complet":
                            st.success(f"üéâ F√©licitations! Le dossier de {collab_data['Pr√©nom']} {collab_data['Nom']} est maintenant COMPLET!")
                        else:
                            st.info(f"üìä Dossier mis √† jour. Statut: **{nouveau_statut}** ({len(new_missing_docs)} documents encore manquants)")
                            if new_missing_docs:
                                st.write("üìÑ Documents encore manquants:")
                                for doc in new_missing_docs:
                                    st.write(f"  ‚Ä¢ {doc}")
                        
                        st.rerun()
        else:
            st.info("üì≠ Aucun collaborateur dans la base de donn√©es. Ajoutez d'abord un collaborateur.")

# ============================
# ONGLET 3: RELANCES AUTOMATIQUES
# ============================
with tab3:
    st.header("üìß Syst√®me de Relances Automatiques")
    
    # Configuration Gmail
    with st.expander("‚öôÔ∏è Configuration Gmail", expanded=False):
        st.info("üîê Configuration s√©curis√©e de votre compte Gmail pour l'envoi automatique")
        
        col_gmail1, col_gmail2 = st.columns(2)
        
        with col_gmail1:
            sender_email = st.text_input("üìß Votre email Gmail", placeholder="votre.email@gmail.com")
        
        with col_gmail2:
            sender_password = st.text_input("üîë Mot de passe d'application", type="password", 
                                          help="Utilisez un mot de passe d'application Gmail (pas votre mot de passe principal)")
        
        st.warning("‚ö†Ô∏è **Important**: Utilisez un 'Mot de passe d'application' Gmail, pas votre mot de passe principal. "
                  "Allez dans votre compte Google > S√©curit√© > Mots de passe d'application pour en cr√©er un.")
    
    # S√©lection des collaborateurs √† relancer
    st.subheader("üë• Collaborateurs avec documents manquants")
    
    # Filtrer les collaborateurs avec des documents manquants
    incomplete_collabs = st.session_state.hr_database[st.session_state.hr_database['Statut'] == 'En cours'].copy()
    
    if len(incomplete_collabs) > 0:
        # Tableau des collaborateurs √† relancer
        display_incomplete = incomplete_collabs[['Nom', 'Pr√©nom', 'Poste', 'Email', 'Date_integration', 'Derniere_relance', 'Nombre_relances']].copy()
        display_incomplete['Nb_docs_manquants'] = incomplete_collabs['Documents_manquants'].apply(get_missing_documents_count)
        
        display_incomplete.columns = ['Nom', 'Pr√©nom', 'Poste', 'Email', 'Date Int√©gration', 'Derni√®re Relance', 'Nb Relances', 'Docs Manquants']
        
        st.dataframe(display_incomplete, use_container_width=True, hide_index=True)
        
        # Formulaire de relance
        st.subheader("üì® Envoyer une relance")
        
        with st.form("relance_form"):
            # S√©lection du collaborateur
            collab_options = incomplete_collabs.apply(lambda x: f"{x['Pr√©nom']} {x['Nom']} ({x['Email']})", axis=1).tolist()
            selected_collab_relance = st.selectbox("Choisir le collaborateur:", collab_options)
            
            if selected_collab_relance:
                # Trouver les donn√©es du collaborateur s√©lectionn√©
                selected_idx_relance = collab_options.index(selected_collab_relance)
                collab_relance_data = incomplete_collabs.iloc[selected_idx_relance]
                
                # Afficher les documents manquants
                try:
                    missing_docs_relance = json.loads(collab_relance_data['Documents_manquants'])
                except:
                    missing_docs_relance = []
                
                st.info(f"üìÑ Documents manquants pour {collab_relance_data['Pr√©nom']} {collab_relance_data['Nom']}:")
                for doc in missing_docs_relance:
                    st.write(f"  ‚Ä¢ {doc}")
                
                # Template de message (modifiable)
                default_message = f"""Bonjour {collab_relance_data['Pr√©nom']},

J'esp√®re que vous allez bien.

Je me permets de vous rappeler qu'il manque encore quelques documents pour compl√©ter votre dossier RH :

{chr(10).join([f"‚Ä¢ {doc}" for doc in missing_docs_relance])}

Merci de bien vouloir nous transmettre ces documents dans les plus brefs d√©lais pour finaliser votre int√©gration.

Si vous avez des questions, n'h√©sitez pas √† me contacter.

Cordialement,
Service RH - TGCC"""
                
                message_body = st.text_area("‚úèÔ∏è Message de relance (modifiable):", value=default_message, height=300)
                
                # Bouton d'envoi
                send_button = st.form_submit_button("üìß Envoyer la relance", type="primary", use_container_width=True)
                
                if send_button:
                    if sender_email and sender_password:
                        with st.spinner("üì§ Envoi de l'email en cours..."):
                            success = send_email_reminder(
                                collab_relance_data['Email'],
                                collab_relance_data['Pr√©nom'],
                                missing_docs_relance,
                                sender_email,
                                sender_password
                            )
                            
                            if success:
                                # Mettre √† jour les donn√©es de relance
                                original_idx = st.session_state.hr_database[
                                    (st.session_state.hr_database['Nom'] == collab_relance_data['Nom']) &
                                    (st.session_state.hr_database['Pr√©nom'] == collab_relance_data['Pr√©nom'])
                                ].index[0]
                                
                                st.session_state.hr_database.loc[original_idx, 'Derniere_relance'] = datetime.now().strftime('%Y-%m-%d')
                                st.session_state.hr_database.loc[original_idx, 'Nombre_relances'] += 1
                                
                                # Ajouter √† l'historique
                                nouvelle_relance = pd.DataFrame({
                                    'Date': [datetime.now().strftime('%Y-%m-%d %H:%M')],
                                    'Collaborateur': [f"{collab_relance_data['Pr√©nom']} {collab_relance_data['Nom']}"],
                                    'Email': [collab_relance_data['Email']],
                                    'Documents_relances': [json.dumps(missing_docs_relance)],
                                    'Statut_envoi': ['Envoy√©']
                                })
                                
                                st.session_state.relance_history = pd.concat([st.session_state.relance_history, nouvelle_relance], ignore_index=True)
                                
                                st.success(f"‚úÖ Email envoy√© avec succ√®s √† {collab_relance_data['Pr√©nom']} {collab_relance_data['Nom']}!")
                                st.rerun()
                            else:
                                st.error("‚ùå Erreur lors de l'envoi de l'email. V√©rifiez vos param√®tres Gmail.")
                    else:
                        st.error("‚ùå Veuillez configurer vos param√®tres Gmail d'abord.")
    
    else:
        st.success("üéâ Aucune relance n√©cessaire! Tous les dossiers sont complets.")
    
    # Historique des relances
    st.markdown("---")
    st.subheader("üìà Historique des Relances")
    
    if len(st.session_state.relance_history) > 0:
        # Affichage de l'historique
        history_display = st.session_state.relance_history.copy()
        history_display = history_display.sort_values('Date', ascending=False)
        
        st.dataframe(history_display, use_container_width=True, hide_index=True)
        
        # Statistiques des relances
        col_stat1, col_stat2, col_stat3 = st.columns(3)
        
        with col_stat1:
            total_relances = len(st.session_state.relance_history)
            st.metric("üìß Total Relances", total_relances)
        
        with col_stat2:
            relances_today = len(st.session_state.relance_history[
                st.session_state.relance_history['Date'].str.startswith(datetime.now().strftime('%Y-%m-%d'))
            ])
            st.metric("üìÖ Relances Aujourd'hui", relances_today)
        
        with col_stat3:
            avg_relances = st.session_state.hr_database[st.session_state.hr_database['Nombre_relances'] > 0]['Nombre_relances'].mean()
            if pd.notna(avg_relances):
                st.metric("üìä Moyenne Relances/Collab", f"{avg_relances:.1f}")
            else:
                st.metric("üìä Moyenne Relances/Collab", "0")
    
    else:
        st.info("üì≠ Aucune relance envoy√©e pour le moment.")

# Footer
st.markdown("---")
st.markdown("**üíº Syst√®me de Suivi des Dossiers RH - TGCC** | Version 1.0")
